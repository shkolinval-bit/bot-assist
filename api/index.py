# –§–∞–π–ª: api/index.py (–§–ò–ù–ê–õ–¨–ù–ê–Ø –†–ê–ë–û–ß–ê–Ø –í–ï–†–°–ò–Ø v20+ —Å –ê–¥–º–∏–Ω-–º–µ–Ω—é)

import os
from fastapi import FastAPI, Request
from telegram import Update, Bot, InlineKeyboardButton, InlineKeyboardMarkup
# !!! –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º Application –∏ ApplicationBuilder –¥–ª—è v20+ !!!
from telegram.ext import (
    Application, ApplicationBuilder, CommandHandler, 
    MessageHandler, filters, ContextTypes, CallbackQueryHandler
)
# !!! –ù–û–í–´–ô –ò–ú–ü–û–†–¢: –î–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–æ–º–∞–Ω–¥–∞–º–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ !!!
from typing import Optional 
from sqlalchemy import create_engine, Column, Integer, String, Boolean, Text
from sqlalchemy.orm import sessionmaker, declarative_base
from sqlalchemy.exc import OperationalError

# --- 1. CONFIGURATION (READ FROM RENDER ENVIRONMENT) ---
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
ADMIN_CHAT_ID = os.getenv("ADMIN_CHAT_ID")
DATABASE_URL = os.getenv("DATABASE_URL")
GEMINI_API_KEY = os.getenv("GEMINI_API_KEY")

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –ª–æ–≥–∏–∫–∏ –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π
MOD_THRESHOLD_DEFAULT = 0.85 
STATE_AWAITING_NEW_THRESHOLD = 'AWAITING_NEW_THRESHOLD'

# --- 2. –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ù–ï–ô–†–û–°–ï–¢–ò (–ì–ò–ë–†–ò–î–ù–ê–Ø –°–ò–°–¢–ï–ú–ê) ---
text_classifier = None
try:
    from transformers import pipeline
    # !!! –§–ò–ö–°: –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—É—é –º–æ–¥–µ–ª—å –¥–ª—è Zero-Shot !!!
    text_classifier = pipeline(
        "zero-shot-classification",
        model="MoritzLaurer/mDeBERTa-v3-base-xnli-multilingual-fein-tuned"
    )
    print("INFO: Zero-Shot –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∂–µ–Ω.")
except Exception as e:
    print(f"ERROR: –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ Zero-Shot: {e}. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–º—è –º–æ–¥–µ–ª–∏ –∏ –±–∏–±–ª–∏–æ—Ç–µ–∫—É.")
    text_classifier = None


# --- 3. DATABASE SETUP (SQLAlchemy) ---
Base = declarative_base()
class Settings(Base):
    __tablename__ = 'settings'
    id = Column(Integer, primary_key=True)
    setting_key = Column(String, unique=True)
    setting_value = Column(Text)

class FAQ(Base):
    __tablename__ = 'faq'
    id = Column(Integer, primary_key=True)
    keywords = Column(Text, nullable=False)
    response_text = Column(Text, nullable=False)
    enabled = Column(Boolean, default=True)

SessionLocal = None
try:
    # !!! –û–ñ–ò–î–ê–ï–¢–°–Ø, –ß–¢–û psycopg2-binary –î–û–ë–ê–í–õ–ï–ù –í requirements.txt !!!
    engine = create_engine(DATABASE_URL) 
    Base.metadata.create_all(bind=engine) # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ
    SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)
    print("INFO: –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –∏ —Ç–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–Ω—ã/–ø—Ä–æ–≤–µ—Ä–µ–Ω—ã.")
except Exception as e:
    # –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ psycopg2 –∏–ª–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î –ø—Ä–∏–≤–µ–¥–µ—Ç –∫ SessionLocal = None
    print(f"ERROR: –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}. SessionLocal –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.")
    SessionLocal = None


# --- 4. BOT & APP INITIALIZATION (–§–ò–ö–° v20+) ---
application: Optional[Application] = None
bot: Optional[Bot] = None
try:
    application = ApplicationBuilder().token(TELEGRAM_TOKEN).build()
    bot = application.bot 
    print("INFO: Application (v20+) –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.")
except Exception as e:
    print(f"ERROR: –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å Application: {e}")
    application = None 
    bot = None 

app = FastAPI()


# --- 5. –§–£–ù–ö–¶–ò–ò-–ü–û–ú–û–©–ù–ò–ö–ò ---

def get_db_setting(db_session, key: str, default: str) -> str:
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫—É –∏–∑ –ë–î –∏–ª–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é."""
    setting = db_session.query(Settings).filter_by(setting_key=key).first()
    return setting.setting_value if setting else default

def set_db_setting(db_session, key: str, value: str):
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫—É –≤ –ë–î."""
    setting = db_session.query(Settings).filter_by(setting_key=key).first()
    if setting:
        setting.setting_value = value
    else:
        db_session.add(Settings(setting_key=key, setting_value=value))
    db_session.commit()

async def analyze_for_scam(text_to_analyze: str) -> bool:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç –≤ Gemini API –¥–ª—è –≥–ª—É–±–æ–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –º–æ—à–µ–Ω–Ω–∏—á–µ—Å—Ç–≤–∞."""
    if not GEMINI_API_KEY:
        return False
        
    try:
        from google import genai
        client = genai.Client(api_key=GEMINI_API_KEY)
        
        prompt = (
            "–¢—ã ‚Äî —Å—Ç—Ä–æ–≥–∏–π –º–æ–¥–µ—Ä–∞—Ç–æ—Ä. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–æ–æ–±—â–µ–Ω–∏–µ. "
            "–ï—Å–ª–∏ –æ–Ω–æ —è–≤–ª—è–µ—Ç—Å—è —è–≤–Ω—ã–º —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–º —Å–ø–∞–º–æ–º, –º–æ—à–µ–Ω–Ω–∏—á–µ—Å–∫–∏–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º –æ —Ä–∞–±–æ—Ç–µ, "
            "–∏–ª–∏ —Ñ–∏—à–∏–Ω–≥–æ–º, –æ—Ç–≤–µ—Ç—å –¢–û–õ–¨–ö–û –æ–¥–Ω–∏–º —Å–ª–æ–≤–æ–º: –î–ê. –í –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ –æ—Ç–≤–µ—Ç—å –¢–û–õ–¨–ö–û –æ–¥–Ω–∏–º —Å–ª–æ–≤–æ–º: –ù–ï–¢.\n\n"
            f"–°–æ–æ–±—â–µ–Ω–∏–µ: \"{text_to_analyze}\""
        )
        
        response = client.models.generate_content(
            model='gemini-2.5-flash',
            contents=prompt
        )
        return response.text.strip().upper() == '–î–ê'
        
    except Exception as e:
        print(f"ERROR: –û—à–∏–±–∫–∞ –≤—ã–∑–æ–≤–∞ Gemini API: {e}")
        return False

# !!! –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø !!!
async def generate_response(user_prompt: str) -> str:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–π –æ—Ç–≤–µ—Ç –æ—Ç Gemini."""
    if not GEMINI_API_KEY:
        return "–ò–∑–≤–∏–Ω–∏—Ç–µ, Gemini API-–∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω."
        
    try:
        from google import genai
        client = genai.Client(api_key=GEMINI_API_KEY)
        
        response = client.models.generate_content(
            model='gemini-2.5-flash',
            contents=user_prompt
        )
        return response.text
        
    except Exception as e:
        print(f"ERROR: –û—à–∏–±–∫–∞ –≤—ã–∑–æ–≤–∞ Gemini API: {e}")
        return "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ —Å–≤—è–∑–∞—Ç—å—Å—è —Å AI."

# !!! –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø !!!
async def find_faq_response(message_text: str) -> str | None:
    """–ò—â–µ—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –≤ —Ç–∞–±–ª–∏—Ü–µ FAQ (–¢—Ä–∏–≥–≥–µ—Ä—ã)."""
    if SessionLocal is None:
        return None

    db = SessionLocal()
    try:
        message_words = set(message_text.lower().split())
        active_faqs = db.query(FAQ).filter(FAQ.enabled == True).all()

        for faq in active_faqs:
            # –ò—â–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø–æ –ª—é–±–æ–º—É —Å–ª–æ–≤—É
            faq_keywords = set(faq.keywords.lower().split(',')) 
            
            if any(word in message_words for word in faq_keywords):
                return faq.response_text
                
    except OperationalError:
        print("ERROR: –û—à–∏–±–∫–∞ –ë–î –ø—Ä–∏ –ø–æ–∏—Å–∫–µ FAQ.")
    finally:
        db.close()
        
    return None


# --- 6. HANDLERS (–õ–û–ì–ò–ö–ê) ---

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ /start."""
    # !!! –§–ò–ö–°: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î !!!
    if SessionLocal is None:
        await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞: –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ —Å–µ—Ä–≤–µ—Ä–∞.")
        return

    db = SessionLocal()
    try:
        welcome_text = get_db_setting(db, 'welcome_text', 
            "üéâ –ü—Ä–∏–≤–µ—Ç! –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω, –ë–î –ø–æ–¥–∫–ª—é—á–µ–Ω–∞. –Ø –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /admin –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫.")
    finally:
        db.close()
    
    await update.message.reply_text(welcome_text)
    
    try:
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞
        await context.bot.send_message(
            chat_id=ADMIN_CHAT_ID,
            text=f"–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.effective_user.name} –≤–≤–µ–ª –∫–æ–º–∞–Ω–¥—É /start."
        )
    except Exception as e:
        print(f"–û–®–ò–ë–ö–ê –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø –ê–î–ú–ò–ù–ê: {e}")

# !!! –ù–û–í–´–ô –•–ï–ù–î–õ–ï–†: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ FAQ (–¢—Ä–∏–≥–≥–µ—Ä–æ–≤) !!!
async def add_faq(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å-–æ—Ç–≤–µ—Ç –≤ –ë–î, –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—É."""
    if str(update.effective_user.id) != ADMIN_CHAT_ID:
        await update.message.reply_text("‚õîÔ∏è –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return
    if SessionLocal is None:
        await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞: –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞.")
        return

    # –§–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã: /addfaq –∫–ª—é—á1,–∫–ª—é—á2; –í–∞—à –æ—Ç–≤–µ—Ç
    if len(context.args) < 1 or ';' not in " ".join(context.args):
        await update.message.reply_text("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /addfaq <–∫–ª—é—á–∏ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é>; <—Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞>")
        return

    db = SessionLocal()
    try:
        full_text = " ".join(context.args)
        keywords_part, response_part = full_text.split(';', 1)
        
        keywords = keywords_part.strip().lower()
        response_text = response_part.strip()

        new_faq = FAQ(keywords=keywords, response_text=response_text, enabled=True)
        db.add(new_faq)
        db.commit()
        
        await update.message.reply_text(f"‚úÖ –ù–æ–≤—ã–π FAQ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!\n–ö–ª—é—á–∏: {keywords}")
        
    except Exception as e:
        db.rollback()
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è FAQ: {e}")
    finally:
        db.close()

# !!! –ù–û–í–´–ô –•–ï–ù–î–õ–ï–†: –û—Ç–≤–µ—Ç –Ω–∞ —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ @bot !!!
async def handle_mention(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–≤–µ—á–∞–µ—Ç, –∫–æ–≥–¥–∞ –±–æ—Ç–∞ —É–ø–æ–º–∏–Ω–∞—é—Ç (@bot) –≤ –≥—Ä—É–ø–ø–æ–≤–æ–º —á–∞—Ç–µ."""
    message_text = update.message.text
    
    # –ü—ã—Ç–∞–µ–º—Å—è —É–¥–∞–ª–∏—Ç—å —é–∑–µ—Ä–Ω–µ–π–º –±–æ—Ç–∞ –∏–∑ —Ç–µ–∫—Å—Ç–∞
    mention_username = f"@{context.bot.username}"
    clean_text = message_text.replace(mention_username, "", 1).strip()
    
    if not clean_text:
        await update.message.reply_text("–Ø –∑–¥–µ—Å—å. –°–ø—Ä–∞—à–∏–≤–∞–π—Ç–µ, —è —Å–ª—É—à–∞—é! ü§ñ")
        return
        
    # –ú–æ–¥–µ—Ä–∞—Ü–∏—è: –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —á–µ—Ä–µ–∑ Gemini, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Å–ø–∞–º–∞/–º–æ—à–µ–Ω–Ω–∏—á–µ—Å—Ç–≤–∞ –¥–∞–∂–µ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ
    if await analyze_for_scam(clean_text):
        await update.message.delete()
        await context.bot.send_message(chat_id=update.effective_chat.id, text="‚ùå –í–æ–ø—Ä–æ—Å —É–¥–∞–ª–µ–Ω AI. –ü—Ä–∏—á–∏–Ω–∞: –ú–æ—à–µ–Ω–Ω–∏—á–µ—Å—Ç–≤–æ/—Å–ø–∞–º.")
        return
        
    # –û—Ç–≤–µ—Ç —á–µ—Ä–µ–∑ Gemini
    await update.message.reply_text("–î—É–º–∞—é... (–∏—Å–ø–æ–ª—å–∑—É—é Gemini)")
    response = await generate_response(clean_text)
    await update.message.reply_text(response)


async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫: 1. –ú–æ–¥–µ—Ä–∞—Ü–∏—è, 2. –¢—Ä–∏–≥–≥–µ—Ä FAQ, 3. –ë–∞–∑–æ–≤—ã–π –æ—Ç–≤–µ—Ç."""
    message_text = update.message.text
    
    # 1. –ú–û–î–£–õ–¨ GEMINI (–ì–ª—É–±–æ–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞)
    if await analyze_for_scam(message_text):
        await update.message.delete()
        warning = "‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ AI (Gemini). –ü—Ä–∏—á–∏–Ω–∞: –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –º–æ—à–µ–Ω–Ω–∏—á–µ—Å—Ç–≤–æ/—Å–ø–∞–º."
        await context.bot.send_message(chat_id=update.effective_chat.id, text=warning)
        return
        
    # 2. –ú–û–î–£–õ–¨ ZERO-SHOT (–ë–∞–∑–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ç–æ–∫—Å–∏—á–Ω–æ—Å—Ç—å/—Ä–µ–∫–ª–∞–º—É)
    if text_classifier:
        mod_threshold = MOD_THRESHOLD_DEFAULT
        if SessionLocal:
            db = SessionLocal()
            try:
                mod_threshold = float(get_db_setting(db, 'mod_threshold', str(MOD_THRESHOLD_DEFAULT)))
            except (ValueError, TypeError):
                pass
            finally:
                db.close()
        
        candidate_labels = ["—Ç–æ–∫—Å–∏—á–Ω–æ—Å—Ç—å", "–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã", "—Ä–µ–∫–ª–∞–º–∞", "—Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π —Å–ø–∞–º"]
        results = text_classifier(message_text, candidate_labels, multi_label=True)
        best_label = results['labels'][0]
        best_score = results['scores'][0]
        
        if (best_label in ["—Ç–æ–∫—Å–∏—á–Ω–æ—Å—Ç—å", "—Ä–µ–∫–ª–∞–º–∞"]) and best_score > mod_threshold:
            await update.message.delete()
            warning = f"‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ AI. –ü—Ä–∏—á–∏–Ω–∞: {best_label} (–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {best_score:.2%})."
            await context.bot.send_message(chat_id=update.effective_chat.id, text=warning)
            return

    # 3. –¢–†–ò–ì–ì–ï–†–ù–´–ô –ü–û–ò–°–ö (FAQ) - –ò–º–µ–µ—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –Ω–∞–¥ –±–∞–∑–æ–≤—ã–º –æ—Ç–≤–µ—Ç–æ–º
    faq_answer = await find_faq_response(message_text)
    if faq_answer:
        await update.message.reply_text(faq_answer)
        return
        
    # 4. –ë–∞–∑–æ–≤—ã–π –æ—Ç–≤–µ—Ç (–µ—Å–ª–∏ –≤—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã)
    await update.message.reply_text(f"–Ø –ø–æ–ª—É—á–∏–ª —Ç–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: '{message_text}'")


# !!! –ê–î–ú–ò–ù-–ú–ï–ù–Æ –•–ï–ù–î–õ–ï–†–´ !!!

async def admin_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í—ã–≤–æ–¥–∏—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."""
    if str(update.effective_user.id) != ADMIN_CHAT_ID:
        await update.message.reply_text("‚õîÔ∏è –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.")
        return
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ None –ø–µ—Ä–µ–¥ –æ—Ç–∫—Ä—ã—Ç–∏–µ–º –º–µ–Ω—é
    context.user_data['state'] = None 

    keyboard = [
        [InlineKeyboardButton("üìö –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ FAQ (–ß–µ—Ä–µ–∑ /addfaq)", callback_data='admin_info')],
        [InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ—Ä–æ–≥–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏", callback_data='admin_moderation')],
        [InlineKeyboardButton("üìù –°–±—Ä–æ—Å–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ", callback_data='admin_reset_state')],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text('–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≥–∏–±—Ä–∏–¥–Ω–æ—Å—Ç–∏:', reply_markup=reply_markup)


async def admin_callback_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–æ–∫ –≤ –∞–¥–º–∏–Ω-–º–µ–Ω—é."""
    query = update.callback_query
    await query.answer()

    data = query.data

    if data == 'admin_moderation':
        # –ü–µ—Ä–µ—Ö–æ–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –ø–æ—Ä–æ–≥–∞
        await manage_moderation_menu(query.message, context)
    elif data == 'admin_reset_state':
        context.user_data['state'] = None
        await query.message.edit_text("‚úÖ –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–±—Ä–æ—à–µ–Ω–æ. –í–≤–µ–¥–∏—Ç–µ /admin —Å–Ω–æ–≤–∞ –¥–ª—è –º–µ–Ω—é.")
    elif data == 'admin_info':
        await query.message.edit_text("–î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è FAQ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É `/addfaq –∫–ª—é—á–∏; –æ—Ç–≤–µ—Ç`", parse_mode='Markdown')


async def manage_moderation_menu(message, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–∏–π –ø–æ—Ä–æ–≥ –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –Ω–æ–≤—ã–π."""
    if SessionLocal is None:
        await message.edit_text("‚ö†Ô∏è –û—à–∏–±–∫–∞: –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞.")
        return

    db = SessionLocal()
    try:
        current_threshold = get_db_setting(db, 'mod_threshold', str(MOD_THRESHOLD_DEFAULT))
    finally:
        db.close()

    text = f"–¢–µ–∫—É—â–∏–π –ø–æ—Ä–æ–≥ Zero-Shot (–æ—Ç—Å–µ—á–µ–Ω–∏–µ): **{current_threshold}**\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ (0.00 –¥–æ 1.00):"
    
    # ‚ùóÔ∏è –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    context.user_data['state'] = STATE_AWAITING_NEW_THRESHOLD
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º edit_text, —á—Ç–æ–±—ã –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    await message.edit_text(text, parse_mode='Markdown')


async def handle_admin_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤ —Ä–µ–∂–∏–º–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏."""
    
    state = context.user_data.get('state')
    
    if state == STATE_AWAITING_NEW_THRESHOLD:
        new_value = update.message.text
        
        # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è
        try:
            float_value = float(new_value)
            if not (0.0 <= float_value <= 1.0):
                raise ValueError
        except ValueError:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 0.00 –¥–æ 1.00.")
            return

        # 2. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î
        db = SessionLocal()
        try:
            set_db_setting(db, 'mod_threshold', str(float_value))
            
            # 3. –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è
            context.user_data['state'] = None
            await update.message.reply_text(f"‚úÖ –ü–æ—Ä–æ–≥ –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω –¥–æ: **{float_value}**.")
            
        except Exception as e:
            db.rollback()
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ë–î –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏: {e}")
        finally:
            db.close()
            
    else:
        # –ï—Å–ª–∏ –∞–¥–º–∏–Ω –ø–∏—à–µ—Ç —Ç–µ–∫—Å—Ç, –Ω–æ –Ω–µ –≤ —Ä–µ–∂–∏–º–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        await update.message.reply_text("–Ø –Ω–µ –∑–Ω–∞—é, —á—Ç–æ –¥–µ–ª–∞—Ç—å —Å —ç—Ç–∏–º —Ç–µ–∫—Å—Ç–æ–º. –í–≤–µ–¥–∏—Ç–µ /admin –¥–ª—è –º–µ–Ω—é.")


# --- 7. REGISTER HANDLERS ---
if application:
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("addfaq", add_faq)) 
    application.add_handler(CommandHandler("admin", admin_menu)) # <-- –ö–æ–º–∞–Ω–¥–∞ –º–µ–Ω—é
    
    # <-- –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –Ω–∞–∂–∞—Ç–∏–π –∫–Ω–æ–ø–æ–∫ Inline Keyboard. –ü–∞—Ç—Ç–µ—Ä–Ω –∏—â–µ—Ç callback_data, –Ω–∞—á–∏–Ω–∞—é—â–∏–µ—Å—è —Å 'admin_'
    application.add_handler(CallbackQueryHandler(admin_callback_handler, pattern='^admin_')) 
    
    # <-- –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏. –°—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–æ–ª—å–∫–æ –Ω–∞ —Ç–µ–∫—Å—Ç –∞–¥–º–∏–Ω–∞ –ë–ï–ó –∫–æ–º–∞–Ω–¥
    application.add_handler(MessageHandler(
        filters.TEXT & filters.User(user_id=int(ADMIN_CHAT_ID)) & ~filters.COMMAND, handle_admin_input
    ))
    
    # <-- –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è —É–ø–æ–º–∏–Ω–∞–Ω–∏—è @bot (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –≤—ã—à–µ, —á–µ–º —É –æ–±—â–µ–≥–æ —Ö–µ–Ω–¥–ª–µ—Ä–∞)
    application.add_handler(MessageHandler(filters.TEXT & filters.Mention(), handle_mention))
    
    # <-- –û–ë–©–ò–ô –•–ï–ù–î–õ–ï–† (–æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ª—é–±–æ–π –¥—Ä—É–≥–æ–π —Ç–µ–∫—Å—Ç, –µ—Å–ª–∏ –Ω–µ –∫–æ–º–∞–Ω–¥–∞ –∏ –Ω–µ —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ)
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message)) 
else:
    print("ERROR: Application –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω, —Ö—ç–Ω–¥–ª–µ—Ä—ã –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã.")


# --- 8. WEB SERVER ENDPOINTS (–°–¢–ê–ë–ò–õ–¨–ù–ê–Ø –í–ï–†–°–ò–Ø v20+) ---

@app.post("/api/webhook")
async def webhook(request: Request):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ Application.
    –≠—Ç–æ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è serverless –æ–∫—Ä—É–∂–µ–Ω–∏—è (v20+).
    """
    if not application or not bot:
        print("ERROR: –í–µ–±—Ö—É–∫ –≤—ã–∑–≤–∞–Ω, –Ω–æ Application –Ω–µ —Å–æ–∑–¥–∞–Ω.")
        return {"status": "error", "message": "Bot not initialized"}

    try:
        data = await request.json()
        update = Update.de_json(data, bot)
        
        # –ö–õ–Æ–ß–ï–í–û–ô –§–ò–ö–° –î–õ–Ø RuntimeError: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∫–∞–∂–¥–æ–º –≤—ã–∑–æ–≤–µ
        await application.initialize() 
        await application.process_update(update) 
        await application.shutdown() 
        
        return {"status": "ok"}
        
    except Exception as e:
        print(f"ERROR: –û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –≤–µ–±—Ö—É–∫–∞: {e}")
        return {"status": "error", "message": str(e)}


@app.get("/")
def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è."""
    return {"status": "Bot is alive and ready for action!"}
