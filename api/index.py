# –§–∞–π–ª: api/index.py (–§–ò–ù–ê–õ–¨–ù–ê–Ø –°–¢–ê–ë–ò–õ–¨–ù–ê–Ø –í–ï–†–°–ò–Ø –° GEMINI)

import os
from fastapi import FastAPI, Request
from telegram import Update, Bot
from telegram.ext import Dispatcher, CommandHandler, MessageHandler, filters, ContextTypes
from sqlalchemy import create_engine, Column, Integer, String, Boolean, Text
from sqlalchemy.orm import sessionmaker, declarative_base
from sqlalchemy.exc import OperationalError

# --- 1. CONFIGURATION (READ FROM RENDER ENVIRONMENT) ---
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
ADMIN_CHAT_ID = os.getenv("ADMIN_CHAT_ID")
DATABASE_URL = os.getenv("DATABASE_URL") 
GEMINI_API_KEY = os.getenv("GEMINI_API_KEY") # <--- –ö–ª—é—á –¥–ª—è LLM


# --- 2. –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ù–ï–ô–†–û–°–ï–¢–ò (Toxicity) ---
try:
    # –û—Å—Ç–∞–≤–ª—è–µ–º Zero-Shot –¥–ª—è –±–∞–∑–æ–≤–æ–π –º–æ–¥–µ—Ä–∞—Ü–∏–∏ (–±–µ—Å–ø–ª–∞—Ç–Ω—ã–π, –±—ã—Å—Ç—Ä—ã–π —É—Ä–æ–≤–µ–Ω—å)
    from transformers import pipeline
    text_classifier = pipeline(
        "zero-shot-classification",
        model="s-nlp/ru-mtl-zero-shot-public"
    )
    print("INFO: Zero-Shot –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∂–µ–Ω.")
except Exception as e:
    print(f"ERROR: –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ Zero-Shot: {e}")
    text_classifier = None


# --- 3. DATABASE SETUP (SQLAlchemy) ---
Base = declarative_base() 
class Settings(Base):
    __tablename__ = 'settings'
    id = Column(Integer, primary_key=True)
    setting_key = Column(String, unique=True)
    setting_value = Column(Text)

class FAQ(Base):
    __tablename__ = 'faq'
    id = Column(Integer, primary_key=True)
    keywords = Column(Text, nullable=False)
    response_text = Column(Text, nullable=False)
    enabled = Column(Boolean, default=True)

engine = create_engine(DATABASE_URL)
SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)


# --- 4. BOT & APP INITIALIZATION (–§–ò–ö–° –û–®–ò–ë–ö–ò) ---
bot = Bot(token=TELEGRAM_TOKEN)
# !!! –§–ò–ö–°: –ò—Å–ø–æ–ª—å–∑—É–µ–º Dispatcher, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å RuntimeError !!!
dp = Dispatcher(bot, None) 
app = FastAPI()


# --- 5. –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –ê–ù–ê–õ–ò–ó –°–ü–ê–ú–ê –ß–ï–†–ï–ó GEMINI ---
async def analyze_for_scam(text_to_analyze: str) -> bool:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç –≤ Gemini API –¥–ª—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –º–æ—à–µ–Ω–Ω–∏—á–µ—Å—Ç–≤–∞."""
    if not GEMINI_API_KEY:
        print("WARNING: GEMINI_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ü—Ä–æ–ø—É—Å–∫–∞—é –ø—Ä–æ–≤–µ—Ä–∫—É LLM.")
        return False
        
    try:
        from google import genai
        client = genai.Client(api_key=GEMINI_API_KEY)
        
        prompt = (
            "–¢—ã ‚Äî —Å—Ç—Ä–æ–≥–∏–π –º–æ–¥–µ—Ä–∞—Ç–æ—Ä. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. "
            "–ï—Å–ª–∏ –æ–Ω–æ —è–≤–ª—è–µ—Ç—Å—è —è–≤–Ω—ã–º —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–º —Å–ø–∞–º–æ–º, –º–æ—à–µ–Ω–Ω–∏—á–µ—Å–∫–∏–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º –æ —Ä–∞–±–æ—Ç–µ, "
            "–∏–ª–∏ —Ñ–∏—à–∏–Ω–≥–æ–º, –æ—Ç–≤–µ—Ç—å –¢–û–õ–¨–ö–û –æ–¥–Ω–∏–º —Å–ª–æ–≤–æ–º: –î–ê. –í –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ –æ—Ç–≤–µ—Ç—å –¢–û–õ–¨–ö–û –æ–¥–Ω–∏–º —Å–ª–æ–≤–æ–º: –ù–ï–¢.\n\n"
            f"–°–æ–æ–±—â–µ–Ω–∏–µ: \"{text_to_analyze}\""
        )
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –≤—ã–∑–æ–≤ LLM
        response = await client.models.generate_content(
            model='gemini-2.5-flash',
            contents=prompt
        )
        
        return response.text.strip().upper() == '–î–ê'
        
    except Exception as e:
        print(f"ERROR: –û—à–∏–±–∫–∞ –≤—ã–∑–æ–≤–∞ Gemini API: {e}")
        return False


# --- 6. HANDLERS (–õ–û–ì–ò–ö–ê) ---

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ /start."""
    # (–õ–æ–≥–∏–∫–∞ —Å –ë–î –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è)
    # ... (–∫–æ–¥ start –æ–ø—É—â–µ–Ω –¥–ª—è –∫—Ä–∞—Ç–∫–æ—Å—Ç–∏, –æ–Ω –æ—Å—Ç–∞–ª—Å—è —Ç–∞–∫–∏–º –∂–µ) ...
    db = SessionLocal()
    try:
        welcome_setting = db.query(Settings).filter_by(setting_key='welcome_text').first()
        welcome_text = welcome_setting.setting_value if welcome_setting else "üéâ –ü—Ä–∏–≤–µ—Ç! –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω, –ë–î –ø–æ–¥–∫–ª—é—á–µ–Ω–∞. –ù–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–∫–∞ –Ω–µ—Ç, –Ω–æ –º—ã –≥–æ—Ç–æ–≤—ã!"
    except OperationalError:
        welcome_text = "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ DATABASE_URL."
    finally:
        db.close()
    
    await update.message.reply_text(welcome_text)
    
    try:
        await context.bot.send_message(
            chat_id=ADMIN_CHAT_ID, 
            text=f"–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.effective_user.name} –≤–≤–µ–ª –∫–æ–º–∞–Ω–¥—É /start."
        )
    except Exception as e:
        print(f"–û–®–ò–ë–ö–ê –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø –ê–î–ú–ò–ù–ê: {e}")


async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫: 1. Gemini, 2. Zero-Shot, 3. –û—Ç–≤–µ—Ç."""
    message_text = update.message.text
    
    # 1. –ú–û–î–£–õ–¨ GEMINI (–ì–ª—É–±–æ–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–ø–∞–º/—Ä–∞–±–æ—Ç—É)
    if await analyze_for_scam(message_text):
        await update.message.delete()
        warning = "‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ AI (Gemini). –ü—Ä–∏—á–∏–Ω–∞: –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –º–æ—à–µ–Ω–Ω–∏—á–µ—Å—Ç–≤–æ/—Å–ø–∞–º."
        await context.bot.send_message(chat_id=update.effective_chat.id, text=warning)
        return

    # 2. –ú–û–î–£–õ–¨ ZERO-SHOT (–ë–∞–∑–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ç–æ–∫—Å–∏—á–Ω–æ—Å—Ç—å/—Ä–µ–∫–ª–∞–º—É)
    if text_classifier:
        candidate_labels = ["—Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π —Å–ø–∞–º", "–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã", "–º–æ—à–µ–Ω–Ω–∏—á–µ—Å—Ç–≤–æ", "—Ç–æ–∫—Å–∏—á–Ω–æ—Å—Ç—å"]
        results = text_classifier(message_text, candidate_labels, multi_label=True)
        best_label = results['labels'][0]
        best_score = results['scores'][0]
        
        if (best_label in ["—Ç–æ–∫—Å–∏—á–Ω–æ—Å—Ç—å", "–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã"]) and best_score > 0.85:
            await update.message.delete()
            warning = f"‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ AI. –ü—Ä–∏—á–∏–Ω–∞: {best_label} (–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {best_score:.2%})."
            await context.bot.send_message(chat_id=update.effective_chat.id, text=warning)
            return

    # 3. –ë–∞–∑–æ–≤—ã–π –æ—Ç–≤–µ—Ç (–µ—Å–ª–∏ –º–æ–¥–µ—Ä–∞—Ü–∏—è –ø—Ä–æ–π–¥–µ–Ω–∞)
    await update.message.reply_text(f"–Ø –ø–æ–ª—É—á–∏–ª —Ç–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: '{message_text}'")


# --- 7. REGISTER HANDLERS ---
# !!! –§–ò–ö–°: –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —á–µ—Ä–µ–∑ dp !!!
dp.add_handler(CommandHandler("start", start))
dp.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message)) 


# --- 8. WEB SERVER ENDPOINTS (–°–¢–ê–ë–ò–õ–¨–ù–ê–Ø –í–ï–†–°–ò–Ø) ---

@app.post("/api/webhook")
async def webhook(request: Request):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ Dispatcher."""
    data = await request.json()
    
    update = Update.de_json(data, bot)
    await dp.process_update(update) # –ü—Ä—è–º–∞—è –ø–µ—Ä–µ–¥–∞—á–∞ –≤ Dispatcher
    
    return {"status": "ok"}

@app.get("/")
def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è."""
    return {"status": "Bot is alive and ready for action!"}
