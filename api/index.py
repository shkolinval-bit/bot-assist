# –§–∞–π–ª: api/index.py (–§–ò–ù–ê–õ–¨–ù–ê–Ø –†–ê–ë–û–ß–ê–Ø –í–ï–†–°–ò–Ø v5.2 - –ü–û–õ–ù–û–°–¢–¨–Æ –ê–°–ò–ù–•–†–û–ù–ù–ê–Ø)

import os
import httpx
import traceback
from fastapi import FastAPI, Request
from telegram import Update, Bot, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application, ApplicationBuilder, CommandHandler,
    MessageHandler, filters, ContextTypes, CallbackQueryHandler
)
from typing import Optional
from sqlalchemy import Column, Integer, String, Boolean, Text, select, inspect
from sqlalchemy.ext.asyncio import create_async_engine, AsyncSession
from sqlalchemy.orm import sessionmaker, declarative_base
from sqlalchemy.exc import OperationalError

# --- 1. CONFIGURATION ---
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
ADMIN_CHAT_ID = os.getenv("ADMIN_CHAT_ID")
GEMINI_API_KEY = os.getenv("GEMINI_API_KEY")
HUGGING_FACE_TOKEN = os.getenv("HUGGING_FACE_TOKEN")
DATABASE_URL = os.getenv("POSTGRES_PRISMA_URL")
HUGGING_FACE_MODEL_URL = "https://api-inference.huggingface.co/models/MoritzLaurer/mDeBERTa-v3-base-xnli-multilingual-fein-tuned"

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
MOD_THRESHOLD_DEFAULT = 0.85
STATE_AWAITING_NEW_THRESHOLD = 'AWAITING_NEW_THRESHOLD'
engine = None
AsyncSessionLocal = None

# --- 2. DATABASE SETUP ---
Base = declarative_base()

try:
    if not DATABASE_URL:
        raise ValueError("–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è POSTGRES_PRISMA_URL –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")

    main_db_url = DATABASE_URL.split('?')[0]
    db_url_adapted = main_db_url.replace("postgres://", "postgresql+asyncpg://", 1)
    
    engine = create_async_engine(db_url_adapted)
    
except Exception as e:
    print(f"FATAL ERROR during initial engine setup: {e}")

# --- –ú–û–î–ï–õ–ò –î–ê–ù–ù–´–• ---
class Settings(Base):
    __tablename__ = 'settings'
    id = Column(Integer, primary_key=True)
    setting_key = Column(String, unique=True)
    setting_value = Column(Text)

class FAQ(Base):
    __tablename__ = 'faq'
    id = Column(Integer, primary_key=True)
    keywords = Column(Text, nullable=False)
    response_text = Column(Text, nullable=False)
    enabled = Column(Boolean, default=True)

# --- –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ë–û–¢–ê –ò FastAPI ---
application: Optional[Application] = None
try:
    application = ApplicationBuilder().token(TELEGRAM_TOKEN).build()
except Exception as e:
    print(f"ERROR: –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å Application: {e}")

app = FastAPI()

@app.on_event("startup")
async def startup_event():
    global AsyncSessionLocal
    if engine is None:
        print("Engine –Ω–µ –±—ã–ª –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω, —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –ø—Ä–æ–ø—É—â–µ–Ω–æ.")
        return
        
    try:
        async with engine.connect() as conn:
            inspector = inspect(conn)
            required_tables = {"settings", "faq"}
            existing_tables = await conn.run_sync(inspector.get_table_names)
            
            print(f"INFO: –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã —Ç–∞–±–ª–∏—Ü—ã –≤ –ë–î: {existing_tables}")
            
            if not required_tables.issubset(existing_tables):
                print("INFO: –ù–µ –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã —Å—É—â–µ—Å—Ç–≤—É—é—Ç. –ó–∞–ø—É—Å–∫–∞—é —Å–æ–∑–¥–∞–Ω–∏–µ...")
                async with engine.begin() as tx_conn:
                    await tx_conn.run_sync(Base.metadata.create_all)
                print("INFO: –ö–æ–º–∞–Ω–¥–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü –≤—ã–ø–æ–ª–Ω–µ–Ω–∞.")
            else:
                print("INFO: –í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ç–∞–±–ª–∏—Ü—ã —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç.")

        AsyncSessionLocal = sessionmaker(engine, class_=AsyncSession, expire_on_commit=False)
        print("INFO: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ.")

    except Exception as e:
        AsyncSessionLocal = None
        print(f"FATAL ERROR during table creation: {e}")
        error_trace = traceback.format_exc()
        error_message = f"üî¥ –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ë–û–¢–ê üî¥\n\n–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å/–ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–∞–±–ª–∏—Ü—ã –≤ –ë–î.\n\n–û—à–∏–±–∫–∞: {e}\n\n–¢—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞:\n{error_trace}"
        if TELEGRAM_TOKEN and ADMIN_CHAT_ID:
            url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage"
            payload = {"chat_id": ADMIN_CHAT_ID, "text": error_message[:4096]}
            async with httpx.AsyncClient() as client:
                await client.post(url, json=payload)

# --- –ê–°–ò–ù–•–†–û–ù–ù–´–ï –§–£–ù–ö–¶–ò–ò-–ü–û–ú–û–©–ù–ò–ö–ò ---
async def classify_text_huggingface(text: str, labels: list) -> Optional[dict]:
    if not HUGGING_FACE_TOKEN: return None
    headers = {"Authorization": f"Bearer {HUGGING_FACE_TOKEN}"}
    payload = {"inputs": text, "parameters": {"candidate_labels": labels, "multi_label": True}}
    async with httpx.AsyncClient() as client:
        try:
            response = await client.post(HUGGING_FACE_MODEL_URL, headers=headers, json=payload, timeout=10.0)
            return response.json() if response.status_code == 200 else None
        except httpx.RequestError: return None

async def get_db_setting(key: str, default: str) -> str:
    async with AsyncSessionLocal() as session:
        result = await session.execute(select(Settings).filter_by(setting_key=key))
        setting = result.scalar_one_or_none()
        return setting.setting_value if setting else default

async def set_db_setting(key: str, value: str):
    async with AsyncSessionLocal() as session:
        async with session.begin():
            result = await session.execute(select(Settings).filter_by(setting_key=key))
            setting = result.scalar_one_or_none()
            if setting:
                setting.setting_value = value
            else:
                session.add(Settings(setting_key=key, setting_value=value))

async def find_faq_response(message_text: str) -> str | None:
    if AsyncSessionLocal is None: return None
    async with AsyncSessionLocal() as session:
        message_words = set(message_text.lower().split())
        result = await session.execute(select(FAQ).filter(FAQ.enabled == True))
        active_faqs = result.scalars().all()
        for faq in active_faqs:
            faq_keywords = set(faq.keywords.lower().split(','))
            if any(word in message_words for word in faq_keywords):
                return faq.response_text
        return None

async def analyze_for_scam(text_to_analyze: str) -> bool:
    if not GEMINI_API_KEY: return False
    try:
        from google import genai
        genai.configure(api_key=GEMINI_API_KEY)
        model = genai.GenerativeModel('gemini-pro')
        prompt = (f"–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –Ω–∞ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π —Å–ø–∞–º, –º–æ—à–µ–Ω–Ω–∏—á–µ—Å—Ç–≤–æ –∏–ª–∏ —Ñ–∏—à–∏–Ω–≥. –û—Ç–≤–µ—Ç—å —Ç–æ–ª—å–∫–æ –î–ê –∏–ª–∏ –ù–ï–¢.\n\n–°–æ–æ–±—â–µ–Ω–∏–µ: \"{text_to_analyze}\"")
        response = await model.generate_content_async(prompt)
        return response.text.strip().upper() == '–î–ê'
    except Exception as e:
        print(f"ERROR: –û—à–∏–±–∫–∞ –≤—ã–∑–æ–≤–∞ Gemini API: {e}")
        return False

async def generate_response(user_prompt: str) -> str:
    if not GEMINI_API_KEY: return "–ö–ª—é—á Gemini API –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω."
    try:
        from google import genai
        genai.configure(api_key=GEMINI_API_KEY)
        model = genai.GenerativeModel('gemini-pro')
        response = await model.generate_content_async(user_prompt)
        return response.text
    except Exception as e:
        print(f"ERROR: –û—à–∏–±–∫–∞ –≤—ã–∑–æ–≤–∞ Gemini API: {e}")
        return "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ –ò–ò."

# --- HANDLERS ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if AsyncSessionLocal is None:
        await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É–≤–µ–¥–æ–º–ª–µ–Ω.")
        return
    try:
        welcome_text = await get_db_setting('welcome_text', "üéâ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /admin –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫.")
        await update.message.reply_text(welcome_text)
    except Exception as e:
        print(f"ERROR in /start handler: {e}")
        await update.message.reply_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")

async def add_faq(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if str(update.effective_user.id) != ADMIN_CHAT_ID:
        await update.message.reply_text("‚õîÔ∏è –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return
    if AsyncSessionLocal is None:
        await update.message.reply_text("‚ö†Ô∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞.")
        return
    if len(context.args) < 1 or ';' not in " ".join(context.args):
        await update.message.reply_text("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /addfaq <–∫–ª—é—á–∏,—á–µ—Ä–µ–∑,–∑–∞–ø—è—Ç—É—é>; <—Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞>")
        return
    try:
        full_text = " ".join(context.args)
        keywords_part, response_part = full_text.split(';', 1)
        async with AsyncSessionLocal() as session:
            async with session.begin():
                new_faq = FAQ(keywords=keywords_part.strip().lower(), response_text=response_part.strip(), enabled=True)
                session.add(new_faq)
        await update.message.reply_text(f"‚úÖ –ù–æ–≤—ã–π FAQ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!\n–ö–ª—é—á–∏: {keywords_part.strip().lower()}")
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è FAQ: {e}")

async def handle_mention(update: Update, context: ContextTypes.DEFAULT_TYPE):
    message_text = update.message.text
    mention_username = f"@{context.bot.username}"
    clean_text = message_text.replace(mention_username, "", 1).strip()
    if not clean_text:
        await update.message.reply_text("–Ø –∑–¥–µ—Å—å. –°–ø—Ä–∞—à–∏–≤–∞–π—Ç–µ! ü§ñ")
        return
    if await analyze_for_scam(clean_text):
        await update.message.delete()
        await context.bot.send_message(chat_id=update.effective_chat.id, text="‚ùå –í–æ–ø—Ä–æ—Å —É–¥–∞–ª–µ–Ω –ò–ò. –ü—Ä–∏—á–∏–Ω–∞: –ú–æ—à–µ–Ω–Ω–∏—á–µ—Å—Ç–≤–æ/—Å–ø–∞–º.")
        return
    await update.message.reply_text("–î—É–º–∞—é... (–∏—Å–ø–æ–ª—å–∑—É—é Gemini)")
    response = await generate_response(clean_text)
    await update.message.reply_text(response)

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    message_text = update.message.text
    if await analyze_for_scam(message_text):
        await update.message.delete()
        await context.bot.send_message(chat_id=update.effective_chat.id, text="‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ –ò–ò (Gemini). –ü—Ä–∏—á–∏–Ω–∞: –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –º–æ—à–µ–Ω–Ω–∏—á–µ—Å—Ç–≤–æ/—Å–ø–∞–º.")
        return

    mod_threshold = MOD_THRESHOLD_DEFAULT
    if AsyncSessionLocal:
        try:
            mod_threshold = float(await get_db_setting('mod_threshold', str(MOD_THRESHOLD_DEFAULT)))
        except Exception:
            pass # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É, –µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ñ–æ–ª—Ç

    candidate_labels = ["—Ç–æ–∫—Å–∏—á–Ω–æ—Å—Ç—å", "–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã", "—Ä–µ–∫–ª–∞–º–∞", "—Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π —Å–ø–∞–º"]
    results = await classify_text_huggingface(message_text, candidate_labels)
    if results and results.get('labels') and results.get('scores'):
        best_label, best_score = results['labels'][0], results['scores'][0]
        if (best_label in ["—Ç–æ–∫—Å–∏—á–Ω–æ—Å—Ç—å", "—Ä–µ–∫–ª–∞–º–∞"]) and best_score > mod_threshold:
            await update.message.delete()
            await context.bot.send_message(chat_id=update.effective_chat.id, text=f"‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ –ò–ò. –ü—Ä–∏—á–∏–Ω–∞: {best_label} (–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {best_score:.2%}).")
            return

    faq_answer = await find_faq_response(message_text)
    if faq_answer:
        await update.message.reply_text(faq_answer)
        return

async def admin_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if str(update.effective_user.id) != ADMIN_CHAT_ID:
        await update.message.reply_text("‚õîÔ∏è –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.")
        return
    context.user_data['state'] = None
    keyboard = [[InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–æ—Ä–æ–≥ –º–æ–¥–µ—Ä–∞—Ü–∏–∏", callback_data='admin_moderation')],]
    await update.message.reply_text('–ú–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:', reply_markup=InlineKeyboardMarkup(keyboard))

async def admin_callback_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    if query.data == 'admin_moderation':
        if AsyncSessionLocal is None:
            await query.message.edit_text("‚ö†Ô∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞.")
            return
        try:
            current_threshold = await get_db_setting('mod_threshold', str(MOD_THRESHOLD_DEFAULT))
            text = f"–¢–µ–∫—É—â–∏–π –ø–æ—Ä–æ–≥ –º–æ–¥–µ—Ä–∞—Ü–∏–∏: **{current_threshold}**\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ (–æ—Ç 0.00 –¥–æ 1.00):"
            context.user_data['state'] = STATE_AWAITING_NEW_THRESHOLD
            await query.message.edit_text(text, parse_mode='Markdown')
        except Exception as e:
            await query.message.edit_text(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")

async def handle_admin_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    state = context.user_data.get('state')
    if state == STATE_AWAITING_NEW_THRESHOLD:
        try:
            float_value = float(update.message.text)
            if not (0.0 <= float_value <= 1.0): raise ValueError
        except ValueError:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 0.00 –¥–æ 1.00.")
            return
        try:
            await set_db_setting('mod_threshold', str(float_value))
            context.user_data['state'] = None
            await update.message.reply_text(f"‚úÖ –ü–æ—Ä–æ–≥ –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω –¥–æ: **{float_value}**.", parse_mode='Markdown')
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ë–î –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏: {e}")

# --- REGISTER HANDLERS ---
if application:
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("addfaq", add_faq))
    application.add_handler(CommandHandler("admin", admin_menu))
    application.add_handler(CallbackQueryHandler(admin_callback_handler, pattern='^admin_'))
    application.add_handler(MessageHandler(filters.TEXT & filters.User(user_id=int(ADMIN_CHAT_ID)) & ~filters.COMMAND, handle_admin_input))
    application.add_handler(MessageHandler(filters.TEXT & filters.Entity("mention"), handle_mention))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
else:
    print("ERROR: Application –Ω–µ –±—ã–ª –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.")

# --- WEB SERVER ENDPOINTS ---
@app.post("/api/webhook")
async def webhook(request: Request):
    if not application: return {"status": "error", "message": "Bot not initialized"}
    try:
        data = await request.json()
        update = Update.de_json(data, application.bot)
        await application.initialize()
        await application.process_update(update)
        await application.shutdown()
        return {"status": "ok"}
    except Exception as e:
        print(f"ERROR: –û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –≤–µ–±—Ö—É–∫–∞: {e}")
        return {"status": "error", "message": str(e)}

@app.get("/")
def health_check():
    return {"status": "–ë–æ—Ç –∂–∏–≤ –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ –Ω–∞ Vercel!"}
