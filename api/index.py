# –§–∞–π–ª: api/index.py (–§–ò–ù–ê–õ–¨–ù–ê–Ø –†–ê–ë–û–ß–ê–Ø –í–ï–†–°–ò–Ø v6.0 - –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω–æ –≤–µ—Ä–Ω–∞—è)

import os
import httpx
import traceback
from fastapi import FastAPI, Request
from telegram import Update, Bot, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application, ApplicationBuilder, CommandHandler,
    MessageHandler, filters, ContextTypes, CallbackQueryHandler
)
from typing import Optional
from sqlalchemy import Column, Integer, String, Boolean, Text, select, inspect
from sqlalchemy.ext.asyncio import create_async_engine, AsyncSession
from sqlalchemy.orm import sessionmaker, declarative_base

# --- 1. CONFIGURATION ---
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
ADMIN_CHAT_ID = os.getenv("ADMIN_CHAT_ID")
GEMINI_API_KEY = os.getenv("GEMINI_API_KEY")
HUGGING_FACE_TOKEN = os.getenv("HUGGING_FACE_TOKEN")
DATABASE_URL = os.getenv("POSTGRES_PRISMA_URL")
HUGGING_FACE_MODEL_URL = "https://api-inference.huggingface.co/models/MoritzLaurer/mDeBERTa-v3-base-xnli-multilingual-fein-tuned"

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
MOD_THRESHOLD_DEFAULT = 0.85
STATE_AWAITING_NEW_THRESHOLD = 'AWAITING_NEW_THRESHOLD'
engine = None
AsyncSessionLocal = None

# --- 2. DATABASE SETUP ---
Base = declarative_base()

try:
    if not DATABASE_URL:
        raise ValueError("–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è POSTGRES_PRISMA_URL –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
    main_db_url = DATABASE_URL.split('?')[0]
    db_url_adapted = main_db_url.replace("postgres://", "postgresql+asyncpg://", 1)
    engine = create_async_engine(db_url_adapted)
except Exception as e:
    print(f"FATAL ERROR during initial engine setup: {e}")

# --- –ú–û–î–ï–õ–ò –î–ê–ù–ù–´–• ---
class Settings(Base):
    __tablename__ = 'settings'
    id = Column(Integer, primary_key=True)
    setting_key = Column(String, unique=True)
    setting_value = Column(Text)

class FAQ(Base):
    __tablename__ = 'faq'
    id = Column(Integer, primary_key=True)
    keywords = Column(Text, nullable=False)
    response_text = Column(Text, nullable=False)
    enabled = Column(Boolean, default=True)

# --- –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ë–û–¢–ê –ò FastAPI ---
application: Optional[Application] = None
try:
    application = ApplicationBuilder().token(TELEGRAM_TOKEN).build()
except Exception as e:
    print(f"ERROR: –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å Application: {e}")
app = FastAPI()

@app.on_event("startup")
async def startup_event():
    global AsyncSessionLocal
    if engine is None:
        print("Engine –Ω–µ –±—ã–ª –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω, —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –ø—Ä–æ–ø—É—â–µ–Ω–æ.")
        return
    try:
        async with engine.connect() as conn:
            inspector = inspect(conn)
            required_tables = {"settings", "faq"}
            existing_tables = await conn.run_sync(inspector.get_table_names)
            if not required_tables.issubset(existing_tables):
                async with engine.begin() as tx_conn:
                    await tx_conn.run_sync(Base.metadata.create_all)
        AsyncSessionLocal = sessionmaker(engine, class_=AsyncSession, expire_on_commit=False)
        print("INFO: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ.")
    except Exception as e:
        AsyncSessionLocal = None
        print(f"FATAL ERROR during table creation: {e}")
        # ... (–±–ª–æ–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∞–¥–º–∏–Ω—É –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏)

# --- –ê–°–ò–ù–•–†–û–ù–ù–´–ï –§–£–ù–ö–¶–ò–ò-–ü–û–ú–û–©–ù–ò–ö–ò (—Ç–µ–ø–µ—Ä—å –ø—Ä–∏–Ω–∏–º–∞—é—Ç —Å–µ—Å—Å–∏—é) ---
async def get_db_setting(session: AsyncSession, key: str, default: str) -> str:
    result = await session.execute(select(Settings).filter_by(setting_key=key))
    setting = result.scalar_one_or_none()
    return setting.setting_value if setting else default

async def set_db_setting(session: AsyncSession, key: str, value: str):
    async with session.begin():
        result = await session.execute(select(Settings).filter_by(setting_key=key))
        setting = result.scalar_one_or_none()
        if setting:
            setting.setting_value = value
        else:
            session.add(Settings(setting_key=key, setting_value=value))

async def find_faq_response(session: AsyncSession, message_text: str) -> str | None:
    message_words = set(message_text.lower().split())
    result = await session.execute(select(FAQ).filter(FAQ.enabled == True))
    active_faqs = result.scalars().all()
    for faq in active_faqs:
        faq_keywords = set(faq.keywords.lower().split(','))
        if any(word in message_words for word in faq_keywords):
            return faq.response_text
    return None

async def classify_text_huggingface(text: str, labels: list) -> Optional[dict]:
    # ... (—ç—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –Ω–µ –º–µ–Ω—è–µ—Ç—Å—è)
    pass 

async def analyze_for_scam(text_to_analyze: str) -> bool:
    # ... (—ç—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –Ω–µ –º–µ–Ω—è–µ—Ç—Å—è)
    pass

async def generate_response(user_prompt: str) -> str:
    # ... (—ç—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –Ω–µ –º–µ–Ω—è–µ—Ç—Å—è)
    pass

# --- HANDLERS (–ø–µ—Ä–µ–ø–∏—Å–∞–Ω—ã —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º —Å–µ—Å—Å–∏–µ–π) ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if AsyncSessionLocal is None:
        await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É–≤–µ–¥–æ–º–ª–µ–Ω.")
        return
    try:
        # –ü–†–ê–í–ò–õ–¨–ù–´–ô –ü–ê–¢–¢–ï–†–ù: —Å–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é –≤ —Ö–µ–Ω–¥–ª–µ—Ä–µ...
        async with AsyncSessionLocal() as session:
            # ...–∏ –ø–µ—Ä–µ–¥–∞–µ–º –µ–µ –≤ —Ñ—É–Ω–∫—Ü–∏—é
            welcome_text = await get_db_setting(session, 'welcome_text', "üéâ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /admin –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫.")
        await update.message.reply_text(welcome_text)
    except Exception as e:
        print(f"ERROR in /start handler: {e}")
        await update.message.reply_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")

async def add_faq(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if str(update.effective_user.id) != ADMIN_CHAT_ID:
        await update.message.reply_text("‚õîÔ∏è –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return
    if AsyncSessionLocal is None:
        await update.message.reply_text("‚ö†Ô∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞.")
        return
    if len(context.args) < 1 or ';' not in " ".join(context.args):
        await update.message.reply_text("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /addfaq <–∫–ª—é—á–∏,—á–µ—Ä–µ–∑,–∑–∞–ø—è—Ç—É—é>; <—Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞>")
        return
    try:
        full_text = " ".join(context.args)
        keywords_part, response_part = full_text.split(';', 1)
        async with AsyncSessionLocal() as session:
            async with session.begin():
                new_faq = FAQ(keywords=keywords_part.strip().lower(), response_text=response_part.strip(), enabled=True)
                session.add(new_faq)
        await update.message.reply_text(f"‚úÖ –ù–æ–≤—ã–π FAQ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!\n–ö–ª—é—á–∏: {keywords_part.strip().lower()}")
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è FAQ: {e}")

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # (–≠—Ç–æ—Ç —Ö–µ–Ω–¥–ª–µ—Ä –∏—Å–ø–æ–ª—å–∑—É–µ—Ç find_faq_response –∏ get_db_setting, –ø–æ—ç—Ç–æ–º—É —Ç–æ–∂–µ –ø–µ—Ä–µ–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è)
    message_text = update.message.text
    # ... (–õ–æ–≥–∏–∫–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏ Gemini –∏ Hugging Face –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)

    if AsyncSessionLocal:
        try:
            async with AsyncSessionLocal() as session:
                faq_answer = await find_faq_response(session, message_text)
                if faq_answer:
                    await update.message.reply_text(faq_answer)
                    return
        except Exception as e:
            print(f"ERROR during FAQ search: {e}")
    # ... (–±–∞–∑–æ–≤—ã–π –æ—Ç–≤–µ—Ç, –µ—Å–ª–∏ –Ω—É–∂–µ–Ω)

# (–û—Å—Ç–∞–ª—å–Ω—ã–µ —Ö–µ–Ω–¥–ª–µ—Ä—ã –∏ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–¥–µ—Å—å –≤ –ø–æ–ª–Ω–æ–π –≤–µ—Ä—Å–∏–∏)

# --- REGISTER HANDLERS ---
if application:
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("addfaq", add_faq))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    # ... (–æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ö–µ–Ω–¥–ª–µ—Ä—ã)
else:
    print("ERROR: Application –Ω–µ –±—ã–ª –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.")

# --- WEB SERVER ENDPOINTS ---
@app.post("/api/webhook")
async def webhook(request: Request):
    if not application: return {"status": "error", "message": "Bot not initialized"}
    try:
        data = await request.json()
        update = Update.de_json(data, application.bot)
        await application.initialize()
        await application.process_update(update)
        await application.shutdown()
        return {"status": "ok"}
    except Exception as e:
        print(f"ERROR: –û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –≤–µ–±—Ö—É–∫–∞: {e}")
        return {"status": "error", "message": str(e)}

@app.get("/")
def health_check():
    return {"status": "–ë–æ—Ç –∂–∏–≤ –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ –Ω–∞ Vercel!"}
