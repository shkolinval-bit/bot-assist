# –§–∞–π–ª: api/index.py

import os
from fastapi import FastAPI, Request
from telegram import Update, Bot
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
from sqlalchemy import create_engine, Column, Integer, String, Boolean, Text
from sqlalchemy.orm import sessionmaker, declarative_base
from sqlalchemy.exc import OperationalError

# --- –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ù–ï–ô–†–û–°–ï–¢–ò ---
try:
    from transformers import pipeline
    # NOTE: –ú–æ–¥–µ–ª—å SkolkovoInstitute/russian_toxicity_classifier –æ—Ç–ª–∏—á–Ω–æ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è —Ä—É—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞.
    text_classifier = pipeline(
        "text-classification",
        model="SkolkovoInstitute/russian_toxicity_classifier",
        tokenizer="SkolkovoInstitute/russian_toxicity_classifier"
    )
    print("INFO: –ù–µ–π—Ä–æ—Å–µ—Ç—å —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ.")
except ImportError:
    print("WARNING: –ë–∏–±–ª–∏–æ—Ç–µ–∫–∏ –¥–ª—è –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã. –ú–æ–¥–µ—Ä–∞—Ü–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∞.")
    text_classifier = None
except Exception as e:
    # –ú–æ–∂–µ—Ç –±—ã—Ç—å –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –º–æ–¥–µ–ª–∏ –∏–ª–∏ –Ω–µ—Ö–≤–∞—Ç–∫–∞ –ø–∞–º—è—Ç–∏ –ø—Ä–∏ cold start
    print(f"ERROR: –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏: {e}")
    text_classifier = None


# --- 1. CONFIGURATION (READ FROM RENDER ENVIRONMENT) ---
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
ADMIN_CHAT_ID = os.getenv("ADMIN_CHAT_ID")
DATABASE_URL = os.getenv("DATABASE_URL") 


# --- 2. DATABASE SETUP (SQLAlchemy) ---
Base = declarative_base() 

# –ú–æ–¥–µ–ª—å –¥–ª—è –æ–±—â–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ (settings) - —Å–æ–∑–¥–∞–Ω–∞ –≤—Ä—É—á–Ω—É—é –≤ Supabase
class Settings(Base):
    __tablename__ = 'settings'
    id = Column(Integer, primary_key=True)
    setting_key = Column(String, unique=True)
    setting_value = Column(Text)

# –ú–æ–¥–µ–ª—å –¥–ª—è FAQ (faq) - —Å–æ–∑–¥–∞–Ω–∞ –≤—Ä—É—á–Ω—É—é –≤ Supabase
class FAQ(Base):
    __tablename__ = 'faq'
    id = Column(Integer, primary_key=True)
    keywords = Column(Text, nullable=False)
    response_text = Column(Text, nullable=False)
    enabled = Column(Boolean, default=True)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Supabase
engine = create_engine(DATABASE_URL)
SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)


# --- 3. BOT & APP INITIALIZATION ---
bot = Bot(token=TELEGRAM_TOKEN)
application = Application.builder().bot(bot).build()
app = FastAPI()


# --- 4. HANDLERS (LOGIC) ---

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ /start. –ß–∏—Ç–∞–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏–∑ –ë–î –∏ —É–≤–µ–¥–æ–º–ª—è–µ—Ç –∞–¥–º–∏–Ω–∞."""
    
    # 4.1 –ß—Ç–µ–Ω–∏–µ –∏–∑ –ë–î
    db = SessionLocal()
    try:
        welcome_setting = db.query(Settings).filter_by(setting_key='welcome_text').first()
        welcome_text = welcome_setting.setting_value if welcome_setting else "üéâ –ü—Ä–∏–≤–µ—Ç! –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω, –ë–î –ø–æ–¥–∫–ª—é—á–µ–Ω–∞, –Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–∫–∞ –Ω–µ—Ç."
    except OperationalError:
        welcome_text = "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ DATABASE_URL."
    finally:
        db.close()
    
    await update.message.reply_text(welcome_text)
    
    # 4.2 –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
    try:
        await context.bot.send_message(
            chat_id=ADMIN_CHAT_ID, 
            text=f"–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.effective_user.name} –≤–≤–µ–ª –∫–æ–º–∞–Ω–¥—É /start."
        )
    except Exception as e:
        print(f"–û–®–ò–ë–ö–ê –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø –ê–î–ú–ò–ù–ê: {e}")


async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫:
    1. –ú–æ–¥–µ—Ä–∞—Ü–∏—è (–Ω–µ–π—Ä–æ—Å–µ—Ç—å)
    2. –ê–≤—Ç–æ–æ—Ç–≤–µ—Ç—ã (FAQ)
    """
    message_text = update.message.text
    
    # 1. –ú–û–î–£–õ–¨ –ù–ï–ô–†–û–°–ï–¢–ï–í–û–ô –ú–û–î–ï–†–ê–¶–ò–ò (–ü—É–Ω–∫—Ç 2 –¢–ó)
    if text_classifier:
        # NOTE: –ü–æ—Ä–æ–≥ –≤ 0.85 –æ–∑–Ω–∞—á–∞–µ—Ç "–≤—ã—Å–æ–∫—É—é —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å"
        results = text_classifier(message_text)[0]
        label = results['label']
        score = results['score']
        
        # –ï—Å–ª–∏ –º–æ–¥–µ–ª—å —É–≤–µ—Ä–µ–Ω–∞, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–æ–∫—Å–∏—á–Ω–æ
        if label == 'toxic' and score > 0.85:
            try:
                # –î–µ–π—Å—Ç–≤–∏–µ: –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                await update.message.delete()
                warning = f"‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ AI-–º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º (–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {score:.2%})."
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                await context.bot.send_message(
                    chat_id=update.effective_chat.id, 
                    text=warning,
                    reply_to_message_id=update.message.message_id # –°—Å—ã–ª–∫–∞ –Ω–∞ —É–¥–∞–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                )
                return # –ü—Ä–µ–∫—Ä–∞—â–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
            except Exception as e:
                # –ï—Å–ª–∏ —É –±–æ—Ç–∞ –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ
                print(f"ERROR: –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –º–æ–¥–µ—Ä–∞—Ü–∏–æ–Ω–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ: {e}")
                
    
    # 2. –ú–æ–¥—É–ª—å FAQ (–≤ –±—É–¥—É—â–µ–º –±—É–¥–µ—Ç –∑–¥–µ—Å—å)
    
    # 3. –ë–∞–∑–æ–≤—ã–π –æ—Ç–≤–µ—Ç (–µ—Å–ª–∏ –º–æ–¥–µ—Ä–∞—Ü–∏—è –ø—Ä–æ–π–¥–µ–Ω–∞)
    await update.message.reply_text(f"–Ø –ø–æ–ª—É—á–∏–ª —Ç–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: '{message_text}'")


# --- 5. REGISTER HANDLERS ---
application.add_handler(CommandHandler("start", start))
application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message)) 


# --- 6. WEB SERVER ENDPOINTS (–°–¢–ê–ë–ò–õ–¨–ù–ê–Ø –í–ï–†–°–ò–Ø) ---

@app.post("/api/webhook")
async def webhook(request: Request):
    """–ü–æ–ª—É—á–∞–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç Telegram –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏—Ö."""
    data = await request.json()
    
    update = Update.de_json(data, bot)
    await application.process_update(update)
    
    return {"status": "ok"}

@app.get("/")
def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è."""
    return {"status": "Bot is alive and ready for action!"}
