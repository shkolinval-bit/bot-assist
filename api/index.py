# –§–∞–π–ª: api/index.py (–í–µ—Ä—Å–∏—è —Å –∞–≤–∞—Ä–∏–π–Ω—ã–º –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ–º –≤ Telegram)

import os
import httpx
import traceback # <-- –ù–û–í–´–ô –ò–ú–ü–û–†–¢ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω—ã—Ö –æ—à–∏–±–æ–∫
from fastapi import FastAPI, Request
from telegram import Update, Bot, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application, ApplicationBuilder, CommandHandler,
    MessageHandler, filters, ContextTypes, CallbackQueryHandler
)
from typing import Optional
from sqlalchemy import create_engine, Column, Integer, String, Boolean, Text
from sqlalchemy.orm import sessionmaker, declarative_base
from sqlalchemy.exc import OperationalError

# --- 1. CONFIGURATION ---
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
ADMIN_CHAT_ID = os.getenv("ADMIN_CHAT_ID")
GEMINI_API_KEY = os.getenv("GEMINI_API_KEY")
HUGGING_FACE_TOKEN = os.getenv("HUGGING_FACE_TOKEN")
DATABASE_URL = os.getenv("POSTGRES_PRISMA_URL") # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ—Ç Supabase
HUGGING_FACE_MODEL_URL = "https://api-inference.huggingface.co/models/MoritzLaurer/mDeBERTa-v3-base-xnli-multilingual-fein-tuned"

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
MOD_THRESHOLD_DEFAULT = 0.85
STATE_AWAITING_NEW_THRESHOLD = 'AWAITING_NEW_THRESHOLD'

# --- 2. DATABASE SETUP (SQLAlchemy) –° –ê–í–ê–†–ò–ô–ù–´–ú –û–ü–û–í–ï–©–ï–ù–ò–ï–ú ---
Base = declarative_base()
SessionLocal = None

try:
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –¥–æ –ø–æ–ø—ã—Ç–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    if not DATABASE_URL:
        raise ValueError("–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è POSTGRES_PRISMA_URL –Ω–µ –Ω–∞–π–¥–µ–Ω–∞! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Vercel.")

    # –ê–¥–∞–ø—Ç–∞—Ü–∏—è —Å—Ç—Ä–æ–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –¥–ª—è asyncpg
    db_url_adapted = DATABASE_URL.replace("postgres://", "postgresql+asyncpg://", 1)
    engine = create_engine(db_url_adapted)

    Base.metadata.create_all(bind=engine)
    SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)
    print("INFO: –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞.") # –≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –º—ã —Ç–∞–∫ –∏ –Ω–µ —É–≤–∏–¥–µ–ª–∏

except Exception as e:
    # --- –ù–û–í–´–ô –ë–õ–û–ö: –ê–í–ê–†–ò–ô–ù–û–ï –û–ü–û–í–ï–©–ï–ù–ò–ï –í TELEGRAM ---
    # –ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –º—ã –Ω–µ –ø—Ä–æ—Å—Ç–æ –ø–∞–¥–∞–µ–º, –∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—à–∏–±–∫—É –∞–¥–º–∏–Ω—É
    print(f"FATAL ERROR: {e}") # –û—Å—Ç–∞–≤–ª—è–µ–º –ª–æ–≥ –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
    error_trace = traceback.format_exc()
    error_message = (
        "üî¥ –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ë–û–¢–ê üî¥\n\n"
        "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.\n\n"
        f"–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è POSTGRES_PRISMA_URL: {'–ù–∞–π–¥–µ–Ω–∞' if DATABASE_URL else '–ù–ï –ù–ê–ô–î–ï–ù–ê'}\n\n"
        f"–¢–µ–∫—Å—Ç –æ—à–∏–±–∫–∏:\n{e}\n\n"
        f"–ü–æ–ª–Ω–∞—è —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞:\n{error_trace}"
    )

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º httpx –¥–ª—è –ø—Ä—è–º–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ Telegram API
    # –≠—Ç–æ —Å—Ä–∞–±–æ—Ç–∞–µ—Ç, –¥–∞–∂–µ –µ—Å–ª–∏ –æ—Å—Ç–∞–ª—å–Ω–∞—è —á–∞—Å—Ç—å –±–æ—Ç–∞ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–ª–∞—Å—å
    if TELEGRAM_TOKEN and ADMIN_CHAT_ID:
        url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage"
        payload = {
            "chat_id": ADMIN_CHAT_ID,
            "text": error_message[:4096] # –û–±—Ä–µ–∑–∞–µ–º –¥–æ –º–∞–∫—Å. –¥–ª–∏–Ω—ã —Å–æ–æ–±—â–µ–Ω–∏—è
        }
        try:
            with httpx.Client() as client:
                client.post(url, json=payload)
        except Exception as http_e:
            print(f"ERROR: –ù–µ —É–¥–∞–ª–æ—Å—å –¥–∞–∂–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–≤–∞—Ä–∏–π–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {http_e}")
    # --- –ö–û–ù–ï–¶ –ê–í–ê–†–ò–ô–ù–û–ì–û –ë–õ–û–ö–ê ---


# --- –í—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å–µ–∫—Ü–∏–∏ –∫–æ–¥–∞ –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π ---

# ... (API-–∫–ª–∏–µ–Ω—Ç, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞, —Ö–µ–Ω–¥–ª–µ—Ä—ã –∏ —Ç.–¥. ... )
# –ö–æ–ø–∏–ø–∞—Å—Ç–∏—Ç—å –≤–µ—Å—å –æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ –Ω–µ –Ω—É–∂–Ω–æ, –æ–Ω –∏–¥–µ–Ω—Ç–∏—á–µ–Ω –ø—Ä–µ–¥—ã–¥—É—â–µ–π –≤–µ—Ä—Å–∏–∏.
# –ì–ª–∞–≤–Ω–æ–µ, —á—Ç–æ –∏–∑–º–µ–Ω–µ–Ω –±–ª–æ–∫ Try/Except –≤—ã—à–µ.

# --- 4. BOT & APP INITIALIZATION ---
application: Optional[Application] = None
bot: Optional[Bot] = None
try:
    application = ApplicationBuilder().token(TELEGRAM_TOKEN).build()
    bot = application.bot
    print("INFO: Application (v20+) –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.")
except Exception as e:
    print(f"ERROR: –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å Application: {e}")
    application = None
    bot = None

app = FastAPI()

# --- –•–µ–Ω–¥–ª–µ—Ä—ã –∏ –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω–æ–µ ---
# (–ó–¥–µ—Å—å –∏–¥–µ—Ç –æ—Å—Ç–∞–ª—å–Ω–∞—è —á–∞—Å—Ç—å –≤–∞—à–µ–≥–æ –∫–æ–¥–∞, –∫–æ—Ç–æ—Ä–∞—è –Ω–µ –º–µ–Ω—è–µ—Ç—Å—è)
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if SessionLocal is None:
        # –¢–µ–ø–µ—Ä—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–≤–∏–¥—è—Ç —Ç–æ–ª—å–∫–æ –æ–±—ã—á–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏, –∞–¥–º–∏–Ω –ø–æ–ª—É—á–∏—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –æ—à–∏–±–∫—É
        await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞: –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞. –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É–≤–µ–¥–æ–º–ª–µ–Ω.")
        return
    db = SessionLocal()
    try:
        welcome_text = get_db_setting(db, 'welcome_text',
            "üéâ –ü—Ä–∏–≤–µ—Ç! –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω, –ë–î –ø–æ–¥–∫–ª—é—á–µ–Ω–∞. –Ø –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /admin –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫.")
    finally:
        db.close()
    await update.message.reply_text(welcome_text)

# –û—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
async def classify_text_huggingface(text: str, labels: list) -> Optional[dict]:
    if not HUGGING_FACE_TOKEN: return None
    headers = {"Authorization": f"Bearer {HUGGING_FACE_TOKEN}"}
    payload = {"inputs": text, "parameters": {"candidate_labels": labels, "multi_label": True}}
    async with httpx.AsyncClient() as client:
        try:
            response = await client.post(HUGGING_FACE_MODEL_URL, headers=headers, json=payload, timeout=10.0)
            return response.json() if response.status_code == 200 else None
        except httpx.RequestError as e: return None
def get_db_setting(db_session, key: str, default: str) -> str:
    setting = db_session.query(Settings).filter_by(setting_key=key).first()
    return setting.setting_value if setting else default
#... –∏ —Ç–∞–∫ –¥–∞–ª–µ–µ –¥–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π ...

# --- 7. REGISTER HANDLERS ---
if application:
    application.add_handler(CommandHandler("start", start))
    # ... –∏ –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ö–µ–Ω–¥–ª–µ—Ä—ã
else:
    print("ERROR: Application –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω, —Ö—ç–Ω–¥–ª–µ—Ä—ã –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã.")

# --- 8. WEB SERVER ENDPOINTS ---
@app.post("/api/webhook")
async def webhook(request: Request):
    if not application or not bot:
        return {"status": "error", "message": "Bot not initialized"}
    try:
        data = await request.json()
        update = Update.de_json(data, bot)
        await application.initialize()
        await application.process_update(update)
        await application.shutdown()
        return {"status": "ok"}
    except Exception as e:
        return {"status": "error", "message": str(e)}

@app.get("/")
def health_check():
    return {"status": "Bot is alive and ready for Vercel!"}
