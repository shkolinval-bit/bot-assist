# –§–∞–π–ª: api/index.py (–§–ò–ù–ê–õ–¨–ù–ê–Ø –†–ê–ë–û–ß–ê–Ø –í–ï–†–°–ò–Ø v3.2 - —Å —Ç–µ—Å—Ç–æ–≤—ã–º —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–º)

import os
import httpx
import traceback
from fastapi import FastAPI, Request
from telegram import Update, Bot, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application, ApplicationBuilder, CommandHandler,
    MessageHandler, filters, ContextTypes, CallbackQueryHandler
)
from typing import Optional
from sqlalchemy import create_engine, Column, Integer, String, Boolean, Text
from sqlalchemy.ext.asyncio import create_async_engine
from sqlalchemy.orm import sessionmaker, declarative_base
from sqlalchemy.exc import OperationalError

# --- 1. CONFIGURATION ---
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
ADMIN_CHAT_ID = os.getenv("ADMIN_CHAT_ID")
GEMINI_API_KEY = os.getenv("GEMINI_API_KEY")
HUGGING_FACE_TOKEN = os.getenv("HUGGING_FACE_TOKEN")
DATABASE_URL = os.getenv("POSTGRES_PRISMA_URL")
HUGGING_FACE_MODEL_URL = "https://api-inference.huggingface.co/models/MoritzLaurer/mDeBERTa-v3-base-xnli-multilingual-fein-tuned"

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
MOD_THRESHOLD_DEFAULT = 0.85
STATE_AWAITING_NEW_THRESHOLD = 'AWAITING_NEW_THRESHOLD'
engine = None
SessionLocal = None

# --- 2. DATABASE SETUP ---
Base = declarative_base()

try:
    if not DATABASE_URL:
        raise ValueError("–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è POSTGRES_PRISMA_URL –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
    main_db_url = DATABASE_URL.split('?')[0]
    db_url_adapted = main_db_url.replace("postgres://", "postgresql+asyncpg://", 1)
    engine = create_async_engine(db_url_adapted)
except Exception as e:
    print(f"FATAL ERROR during initial setup: {e}")
    # ... (–±–ª–æ–∫ –∞–≤–∞—Ä–∏–π–Ω–æ–≥–æ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è)

# --- –ú–û–î–ï–õ–ò –î–ê–ù–ù–´–• ---
class Settings(Base): __tablename__ = 'settings'; id = Column(Integer, primary_key=True); setting_key = Column(String, unique=True); setting_value = Column(Text)
class FAQ(Base): __tablename__ = 'faq'; id = Column(Integer, primary_key=True); keywords = Column(Text, nullable=False); response_text = Column(Text, nullable=False); enabled = Column(Boolean, default=True)

# --- –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ë–û–¢–ê –ò FastAPI ---
application: Optional[Application] = None
try:
    application = ApplicationBuilder().token(TELEGRAM_TOKEN).build()
except Exception as e:
    print(f"ERROR: –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å Application: {e}")
app = FastAPI()

# --- –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ FastAPI ---
@app.on_event("startup")
async def startup_event():
    global SessionLocal
    if engine is None: return
    try:
        async with engine.begin() as conn:
            await conn.run_sync(Base.metadata.create_all)
        print("INFO: –¢–∞–±–ª–∏—Ü—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã/—Å–æ–∑–¥–∞–Ω—ã.")
        SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine, future=True)
    except Exception as e:
        print(f"FATAL ERROR during table creation: {e}")
        SessionLocal = None
        error_trace = traceback.format_exc()
        error_message = f"üî¥ –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ë–û–¢–ê üî¥\n\n–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–∞–±–ª–∏—Ü—ã –≤ –ë–î.\n\n–û—à–∏–±–∫–∞: {e}\n\n–¢—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞:\n{error_trace}"
        if TELEGRAM_TOKEN and ADMIN_CHAT_ID:
            url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage"
            payload = {"chat_id": ADMIN_CHAT_ID, "text": error_message[:4096]}
            async with httpx.AsyncClient() as client:
                await client.post(url, json=payload)

# ... (–≤—Å–µ —Ö–µ–Ω–¥–ª–µ—Ä—ã –∏ —Ñ—É–Ω–∫—Ü–∏–∏-–ø–æ–º–æ—â–Ω–∏–∫–∏ –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if SessionLocal is None:
        await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É–≤–µ–¥–æ–º–ª–µ–Ω.")
        return
    db = SessionLocal()
    try:
        welcome_text = "üéâ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /admin –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫."
        await update.message.reply_text(welcome_text)
    finally:
        db.close()

# (–ó–¥–µ—Å—å –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –≤–∞—à–∏ —Ñ—É–Ω–∫—Ü–∏–∏: add_faq, handle_message, admin_menu –∏ —Ç.–¥.)

# --- WEB SERVER ENDPOINTS ---
@app.post("/api/webhook")
async def webhook(request: Request):
    if not application: return {"status": "error", "message": "Bot not initialized"}
    try:
        data = await request.json()
        update = Update.de_json(data, application.bot)
        await application.initialize()
        await application.process_update(update)
        await application.shutdown()
        return {"status": "ok"}
    except Exception as e:
        print(f"ERROR: –û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –≤–µ–±—Ö—É–∫–∞: {e}")
        return {"status": "error", "message": str(e)}

# --- –ù–û–í–´–ô –¢–ï–°–¢–û–í–´–ô –≠–ù–î–ü–û–ò–ù–¢ ---
@app.get("/api/test_notify")
async def test_notify():
    """
    –≠—Ç–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å–æ–∑–¥–∞–Ω–∞ –¥–ª—è —Ä—É—á–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.
    """
    token = os.getenv("TELEGRAM_TOKEN")
    chat_id = os.getenv("ADMIN_CHAT_ID")
    
    token_found = "–î–∞" if token else "–ù–µ—Ç"
    chat_id_found = "–î–∞" if chat_id else "–ù–µ—Ç"

    test_message = (
        "-- –¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ --\n\n"
        f"–¢–æ–∫–µ–Ω –Ω–∞–π–¥–µ–Ω: {token_found}\n"
        f"ID —á–∞—Ç–∞ –Ω–∞–π–¥–µ–Ω: {chat_id_found}\n"
    )

    if token and chat_id:
        url = f"https://api.telegram.org/bot{token}/sendMessage"
        payload = {"chat_id": chat_id, "text": test_message}
        try:
            async with httpx.AsyncClient() as client:
                response = await client.post(url, json=payload)
            if response.status_code == 200:
                return {"status": "success", "message": "–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ."}
            else:
                return {"status": "error", "message": f"Telegram API –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É: {response.status_code}", "details": response.text}
        except Exception as e:
            return {"status": "error", "message": f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ: {e}"}
    else:
        return {"status": "error", "message": "TELEGRAM_TOKEN –∏–ª–∏ ADMIN_CHAT_ID –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è.", "token_found": token_found, "chat_id_found": chat_id_found}

@app.get("/")
def health_check():
    return {"status": "–ë–æ—Ç –∂–∏–≤ –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ –Ω–∞ Vercel!"}
