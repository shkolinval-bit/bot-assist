# –§–∞–π–ª: api/index.py (–§–ò–ù–ê–õ–¨–ù–ê–Ø –†–ê–ë–û–ß–ê–Ø –í–ï–†–°–ò–Ø v15.1 - —Å –ª–æ–≥–∞–º–∏ AI)

import os
import asyncio
import httpx
from fastapi import FastAPI, Request
from telegram import Update, Bot, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes, CallbackQueryHandler
from typing import Optional
from sqlalchemy import create_engine, Column, Integer, String, Boolean, Text
from sqlalchemy.orm import sessionmaker, declarative_base

# --- 1. CONFIGURATION ---
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
ADMIN_CHAT_ID = os.getenv("ADMIN_CHAT_ID")
DATABASE_URL = os.getenv("POSTGRES_PRISMA_URL")
GEMINI_API_KEY = os.getenv("GEMINI_API_KEY")
HUGGING_FACE_TOKEN = os.getenv("HUGGING_FACE_TOKEN")
HUGGING_FACE_MODEL_URL = "https://api-inference.huggingface.co/models/MoritzLaurer/mDeBERTa-v3-base-xnli-multilingual-fein-tuned"

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
MOD_THRESHOLD_DEFAULT = 0.85
STATE_AWAITING_NEW_THRESHOLD = 'AWAITING_NEW_THRESHOLD'

# --- 2. DATABASE SETUP (–°–ò–ù–•–†–û–ù–ù–û–ï) ---
Base = declarative_base()
engine = None
SessionLocal = None

try:
    if not DATABASE_URL:
        raise ValueError("–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è POSTGRES_PRISMA_URL –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
    main_db_url = DATABASE_URL.split('?')[0]
    db_url_adapted = main_db_url.replace("postgres://", "postgresql+pg8000://", 1)
    engine = create_engine(db_url_adapted)
    SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)
    Base.metadata.create_all(bind=engine, checkfirst=True)
    print("INFO: –°–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π Engine –∏ SessionLocal —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã.")
except Exception as e:
    print(f"FATAL ERROR during engine setup: {e}")

# --- –ú–û–î–ï–õ–ò –î–ê–ù–ù–´–• ---
class Settings(Base):
    __tablename__ = 'settings'
    id = Column(Integer, primary_key=True)
    setting_key = Column(String, unique=True)
    setting_value = Column(Text)
class FAQ(Base):
    __tablename__ = 'faq'
    id = Column(Integer, primary_key=True)
    keywords = Column(Text, nullable=False)
    response_text = Column(Text, nullable=False)
    enabled = Column(Boolean, default=True)

# --- –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø FastAPI ---
app = FastAPI()

# --- –°–ò–ù–•–†–û–ù–ù–´–ï –§–£–ù–ö–¶–ò–ò-–ü–û–ú–û–©–ù–ò–ö–ò –î–õ–Ø –ë–î ---
def get_db_setting(session, key: str, default: str) -> str:
    setting = session.query(Settings).filter_by(setting_key=key).first()
    return setting.setting_value if setting else default

def set_db_setting(session, key: str, value: str):
    setting = session.query(Settings).filter_by(setting_key=key).first()
    if setting:
        setting.setting_value = value
    else:
        session.add(Settings(setting_key=key, setting_value=value))
    session.commit()

def find_faq_response(session, message_text: str) -> str | None:
    message_words = set(message_text.lower().split())
    active_faqs = session.query(FAQ).filter(FAQ.enabled == True).all()
    for faq in active_faqs:
        faq_keywords = set(faq.keywords.lower().split(','))
        if any(word in message_words for word in faq_keywords):
            return faq.response_text
    return None

def add_faq_db(session, keywords: str, response_text: str):
    new_faq = FAQ(keywords=keywords, response_text=response_text, enabled=True)
    session.add(new_faq)
    session.commit()

# --- –ê–°–ò–ù–•–†–û–ù–ù–´–ï –§–£–ù–ö–¶–ò–ò-–ü–û–ú–û–©–ù–ò–ö–ò –î–õ–Ø AI ---
async def classify_text_huggingface(text: str, labels: list) -> Optional[dict]:
    if not HUGGING_FACE_TOKEN: 
        print("LOG_AI: HUGGING_FACE_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return None
    headers = {"Authorization": f"Bearer {HUGGING_FACE_TOKEN}"}
    payload = {"inputs": text, "parameters": {"candidate_labels": labels, "multi_label": True}}
    async with httpx.AsyncClient() as client:
        try:
            print("LOG_AI: –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –≤ Hugging Face...")
            response = await client.post(HUGGING_FACE_MODEL_URL, headers=headers, json=payload, timeout=10.0)
            print(f"LOG_AI: Hugging Face –æ—Ç–≤–µ—Ç–∏–ª —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º {response.status_code}.")
            return response.json() if response.status_code == 200 else None
        except httpx.RequestError as e:
            print(f"LOG_AI_ERROR: –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ Hugging Face: {e}")
            return None

async def analyze_for_scam(text_to_analyze: str) -> bool:
    if not GEMINI_API_KEY: 
        print("LOG_AI: GEMINI_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return False
    try:
        from google import genai
        genai.configure(api_key=GEMINI_API_KEY)
        model = genai.GenerativeModel('gemini-pro')
        prompt = (f"–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –Ω–∞ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π —Å–ø–∞–º, –º–æ—à–µ–Ω–Ω–∏—á–µ—Å—Ç–≤–æ –∏–ª–∏ —Ñ–∏—à–∏–Ω–≥. –û—Ç–≤–µ—Ç—å —Ç–æ–ª—å–∫–æ –î–ê –∏–ª–∏ –ù–ï–¢.\n\n–°–æ–æ–±—â–µ–Ω–∏–µ: \"{text_to_analyze}\"")
        print("LOG_AI: –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –≤ Gemini (–∞–Ω–∞–ª–∏–∑ –Ω–∞ —Å–∫–∞–º)...")
        response = await model.generate_content_async(prompt)
        print("LOG_AI: Gemini (—Å–∫–∞–º) –æ—Ç–≤–µ—Ç–∏–ª.")
        return response.text.strip().upper() == '–î–ê'
    except Exception as e:
        print(f"LOG_AI_ERROR: –û—à–∏–±–∫–∞ –≤—ã–∑–æ–≤–∞ Gemini API (—Å–∫–∞–º): {e}")
        return False

async def generate_response(user_prompt: str) -> str:
    if not GEMINI_API_KEY: 
        print("LOG_AI: GEMINI_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return "–ö–ª—é—á Gemini API –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω."
    try:
        from google import genai
        genai.configure(api_key=GEMINI_API_KEY)
        model = genai.GenerativeModel('gemini-pro')
        print(f"LOG_AI: –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –≤ Gemini (–≥–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞) —Å –ø—Ä–æ–º–ø—Ç–æ–º: '{user_prompt}'")
        response = await model.generate_content_async(user_prompt)
        print("LOG_AI: Gemini (–≥–µ–Ω–µ—Ä–∞—Ü–∏—è) –æ—Ç–≤–µ—Ç–∏–ª.")
        return response.text
    except Exception as e:
        print(f"LOG_AI_ERROR: –û—à–∏–±–∫–∞ –≤—ã–∑–æ–≤–∞ Gemini API (–≥–µ–Ω–µ—Ä–∞—Ü–∏—è): {e}")
        return "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ –ò–ò."

# --- HANDLERS (–ì–ò–ë–†–ò–î–ù–´–ï) ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if SessionLocal is None:
        await update.message.reply_text("‚ö†Ô∏è –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏. SessionLocal –Ω–µ —Å–æ–∑–¥–∞–Ω.")
        return
    session = SessionLocal()
    try:
        welcome_text = await asyncio.to_thread(get_db_setting, session, 'welcome_text', "üéâ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
        await update.message.reply_text(welcome_text)
    except Exception as e:
        await update.message.reply_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –ë–î: {e}")
    finally:
        await asyncio.to_thread(session.close)

async def add_faq(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # ... (–∫–æ–¥ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
    pass

async def handle_mention(update: Update, context: ContextTypes.DEFAULT_TYPE):
    print("LOG: –°—Ä–∞–±–æ—Ç–∞–ª –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–ø–æ–º–∏–Ω–∞–Ω–∏–π (handle_mention).") # --- –õ–û–ì–ò–†–û–í–ê–ù–ò–ï ---
    message_text = update.message.text
    mention_username = f"@{context.bot.username}"
    clean_text = message_text.replace(mention_username, "", 1).strip()
    if not clean_text:
        await update.message.reply_text("–Ø –∑–¥–µ—Å—å. –°–ø—Ä–∞—à–∏–≤–∞–π—Ç–µ! ü§ñ")
        return
    
    print("LOG: –ó–∞–ø—É—Å–∫–∞—é –ø—Ä–æ–≤–µ—Ä–∫—É —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –Ω–∞ —Å–∫–∞–º.") # --- –õ–û–ì–ò–†–û–í–ê–ù–ò–ï ---
    if await analyze_for_scam(clean_text):
        print("LOG: –£–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ –∫–∞–∫ —Å–∫–∞–º. –£–¥–∞–ª—è—é.") # --- –õ–û–ì–ò–†–û–í–ê–ù–ò–ï ---
        await update.message.delete()
        await context.bot.send_message(chat_id=update.effective_chat.id, text="‚ùå –í–æ–ø—Ä–æ—Å —É–¥–∞–ª–µ–Ω –ò–ò. –ü—Ä–∏—á–∏–Ω–∞: –ú–æ—à–µ–Ω–Ω–∏—á–µ—Å—Ç–≤–æ/—Å–ø–∞–º.")
        return
    
    await update.message.reply_text("–î—É–º–∞—é... (–∏—Å–ø–æ–ª—å–∑—É—é Gemini)")
    response = await generate_response(clean_text)
    await update.message.reply_text(response)

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    print(f"LOG: –°—Ä–∞–±–æ—Ç–∞–ª –æ—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π (handle_message) –¥–ª—è: '{update.message.text}'") # --- –õ–û–ì–ò–†–û–í–ê–ù–ò–ï ---
    message_text = update.message.text
    
    if await analyze_for_scam(message_text):
        print("LOG: –°–æ–æ–±—â–µ–Ω–∏–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ –∫–∞–∫ —Å–∫–∞–º. –£–¥–∞–ª—è—é.") # --- –õ–û–ì–ò–†–û–í–ê–ù–ò–ï ---
        await update.message.delete()
        await context.bot.send_message(chat_id=update.effective_chat.id, text="‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ –ò–ò (Gemini). –ü—Ä–∏—á–∏–Ω–∞: –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –º–æ—à–µ–Ω–Ω–∏—á–µ—Å—Ç–≤–æ/—Å–ø–∞–º.")
        return

    # ... (–æ—Å—Ç–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ handle_message –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)

# ... (–æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ö–µ–Ω–¥–ª–µ—Ä—ã: admin_menu –∏ —Ç.–¥.)

# --- WEB SERVER ENDPOINTS ---
@app.post("/api/webhook")
async def webhook(request: Request):
    application = ApplicationBuilder().token(TELEGRAM_TOKEN).build()
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("addfaq", add_faq))
    application.add_handler(MessageHandler(filters.TEXT & filters.Entity("mention"), handle_mention))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    # ... (–¥—Ä—É–≥–∏–µ —Ö–µ–Ω–¥–ª–µ—Ä—ã)
    
    try:
        data = await request.json()
        update = Update.de_json(data, application.bot)
        await application.initialize()
        await application.process_update(update)
        await application.shutdown()
        return {"status": "ok"}
    except Exception as e:
        print(f"ERROR: –û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –≤–µ–±—Ö—É–∫–∞: {e}")
        return {"status": "error", "message": str(e)}

@app.get("/")
def health_check():
    return {"status": "–ë–æ—Ç –∂–∏–≤. –í–µ—Ä—Å–∏—è v15.1 (—Å –ª–æ–≥–∞–º–∏ AI)."}
