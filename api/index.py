# –§–∞–π–ª: api/index.py

import os
from fastapi import FastAPI, Request
from telegram import Update, Bot
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
from sqlalchemy import create_engine, Column, Integer, String, Boolean, Text
from sqlalchemy.orm import sessionmaker, declarative_base
from sqlalchemy.exc import OperationalError

# --- 1. CONFIGURATION (READ FROM RENDER ENVIRONMENT) ---
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
ADMIN_CHAT_ID = os.getenv("ADMIN_CHAT_ID")
DATABASE_URL = os.getenv("DATABASE_URL") 


# --- 2. DATABASE SETUP (SQLAlchemy) ---
# –ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è –º–æ–¥–µ–ª–µ–π
Base = declarative_base() 

# –ú–æ–¥–µ–ª—å –¥–ª—è –æ–±—â–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ (settings)
class Settings(Base):
    __tablename__ = 'settings'
    id = Column(Integer, primary_key=True)
    setting_key = Column(String, unique=True)
    setting_value = Column(Text)

# –ú–æ–¥–µ–ª—å –¥–ª—è FAQ (faq)
class FAQ(Base):
    __tablename__ = 'faq'
    id = Column(Integer, primary_key=True)
    keywords = Column(Text, nullable=False)
    response_text = Column(Text, nullable=False)
    enabled = Column(Boolean, default=True)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Supabase
engine = create_engine(DATABASE_URL)
SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)


# --- 3. BOT & APP INITIALIZATION ---
bot = Bot(token=TELEGRAM_TOKEN)
application = Application.builder().bot(bot).build()
app = FastAPI()


# --- 4. HANDLERS (LOGIC) ---

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ /start. –ß–∏—Ç–∞–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏–∑ –ë–î –∏ —É–≤–µ–¥–æ–º–ª—è–µ—Ç –∞–¥–º–∏–Ω–∞."""
    
    # 4.1 –ß—Ç–µ–Ω–∏–µ –∏–∑ –ë–î
    db = SessionLocal()
    try:
        # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã settings
        welcome_setting = db.query(Settings).filter_by(setting_key='welcome_text').first()
        welcome_text = welcome_setting.setting_value if welcome_setting else "üéâ –ü—Ä–∏–≤–µ—Ç! –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω, –ë–î –ø–æ–¥–∫–ª—é—á–µ–Ω–∞. –ù–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–∫–∞ –Ω–µ—Ç, –Ω–æ –º—ã –≥–æ—Ç–æ–≤—ã!"
    except OperationalError:
        # –ï—Å–ª–∏ –ë–î –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç –∏–ª–∏ —Ç–∞–±–ª–∏—Ü—ã –Ω–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—ã–π —Ç–µ–∫—Å—Ç
        welcome_text = "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è."
    finally:
        db.close()
    
    await update.message.reply_text(welcome_text)
    
    # 4.2 –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É (–í–ö–õ–Æ–ß–ï–ù–û)
    try:
        await context.bot.send_message(
            chat_id=ADMIN_CHAT_ID, 
            text=f"–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.effective_user.name} –≤–≤–µ–ª –∫–æ–º–∞–Ω–¥—É /start."
        )
    except Exception as e:
        # –õ–æ–≤–∏–º –æ—à–∏–±–∫—É, –µ—Å–ª–∏ ADMIN_CHAT_ID –Ω–µ–≤–µ—Ä–µ–Ω, –Ω–æ –Ω–µ –ø–æ–∑–≤–æ–ª—è–µ–º —É–ø–∞—Å—Ç—å –≤—Å–µ–º—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é
        print(f"–û–®–ò–ë–ö–ê –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø –ê–î–ú–ò–ù–ê: {e}")


async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –∏ –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç–æ–≤ (–≤ –±—É–¥—É—â–µ–º)."""
    
    # –ü–æ–∫–∞ —á—Ç–æ –ø—Ä–æ—Å—Ç–æ –æ—Ç–≤–µ—á–∞–µ—Ç —ç—Ö–æ–º
    await update.message.reply_text(f"–Ø –ø–æ–ª—É—á–∏–ª —Ç–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: '{update.message.text}'")


# --- 5. REGISTER HANDLERS ---
application.add_handler(CommandHandler("start", start))
application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message)) 


# --- 6. WEB SERVER ENDPOINTS (–°–¢–ê–ë–ò–õ–¨–ù–ê–Ø –í–ï–†–°–ò–Ø –î–õ–Ø RENDER) ---

@app.post("/api/webhook")
async def webhook(request: Request):
    """–ü–æ–ª—É—á–∞–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç Telegram –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏—Ö."""
    data = await request.json()
    
    # –°—Ç–∞–±–∏–ª—å–Ω—ã–π —Ä–µ–∂–∏–º: —Å—Ä–∞–∑—É –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–µ–∑ –ª–∏—à–Ω–∏—Ö initialize/shutdown
    update = Update.de_json(data, bot)
    await application.process_update(update)
    
    return {"status": "ok"}

@app.get("/")
def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è."""
    return {"status": "Bot is alive and ready for action!"}
