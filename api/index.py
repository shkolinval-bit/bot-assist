# –§–∞–π–ª: api/index.py (–õ–ï–ì–ö–ê–Ø –í–ï–†–°–ò–Ø –î–õ–Ø VERCEL v21+)

import os
import httpx  # --- –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º httpx –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö API-–∑–∞–ø—Ä–æ—Å–æ–≤ ---
from fastapi import FastAPI, Request
from telegram import Update, Bot, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application, ApplicationBuilder, CommandHandler,
    MessageHandler, filters, ContextTypes, CallbackQueryHandler
)
from typing import Optional
from sqlalchemy import create_engine, Column, Integer, String, Boolean, Text
from sqlalchemy.orm import sessionmaker, declarative_base
from sqlalchemy.exc import OperationalError

# --- 1. CONFIGURATION ---
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
ADMIN_CHAT_ID = os.getenv("ADMIN_CHAT_ID")
DATABASE_URL = os.getenv("DATABASE_URL")
GEMINI_API_KEY = os.getenv("GEMINI_API_KEY")
# --- –ò–ó–ú–ï–ù–ï–ù–ò–ï: –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω –¥–ª—è Hugging Face ---
HUGGING_FACE_TOKEN = os.getenv("HUGGING_FACE_TOKEN")
HUGGING_FACE_MODEL_URL = "https://api-inference.huggingface.co/models/MoritzLaurer/mDeBERTa-v3-base-xnli-multilingual-fein-tuned"

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –ª–æ–≥–∏–∫–∏ –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π
MOD_THRESHOLD_DEFAULT = 0.85
STATE_AWAITING_NEW_THRESHOLD = 'AWAITING_NEW_THRESHOLD'

# --- 2. –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ù–ï–ô–†–û–°–ï–¢–ò -> –ó–ê–ú–ï–ù–ï–ù–ê –ù–ê API-–ö–õ–ò–ï–ù–¢ ---
# –õ–æ–∫–∞–ª—å–Ω—ã–π –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä —É–¥–∞–ª–µ–Ω –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å Vercel

async def classify_text_huggingface(text: str, labels: list) -> Optional[dict]:
    """
    --- –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞ —á–µ—Ä–µ–∑ Hugging Face API. ---
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç –Ω–∞ API –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ, –ø–æ—Ö–æ–∂–µ–º –Ω–∞ —Å—Ç–∞—Ä—ã–π pipeline.
    """
    if not HUGGING_FACE_TOKEN:
        print("WARNING: Hugging Face token not configured.")
        return None

    headers = {"Authorization": f"Bearer {HUGGING_FACE_TOKEN}"}
    payload = {
        "inputs": text,
        "parameters": {"candidate_labels": labels, "multi_label": True},
    }

    async with httpx.AsyncClient() as client:
        try:
            response = await client.post(HUGGING_FACE_MODEL_URL, headers=headers, json=payload, timeout=10.0)
            if response.status_code == 200:
                return response.json()
            else:
                print(f"ERROR: Hugging Face API error {response.status_code}: {response.text}")
                return None
        except httpx.RequestError as e:
            print(f"ERROR: HTTPX request to Hugging Face failed: {e}")
            return None


# --- 3. DATABASE SETUP (SQLAlchemy) ---
Base = declarative_base()
class Settings(Base):
    __tablename__ = 'settings'
    id = Column(Integer, primary_key=True)
    setting_key = Column(String, unique=True)
    setting_value = Column(Text)

class FAQ(Base):
    __tablename__ = 'faq'
    id = Column(Integer, primary_key=True)
    keywords = Column(Text, nullable=False)
    response_text = Column(Text, nullable=False)
    enabled = Column(Boolean, default=True)

SessionLocal = None
try:
    # --- –û–¢–õ–ê–î–û–ß–ù–´–ô –ö–û–î ---
    db_url_from_env = os.getenv("DATABASE_URL")
    print(f"DEBUG: –ü—Ä–æ–≤–µ—Ä—è—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è DATABASE_URL.")
    if not db_url_from_env:
        raise ValueError("–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è DATABASE_URL –Ω–µ –Ω–∞–π–¥–µ–Ω–∞! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Vercel.")
    print(f"DEBUG: –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è DATABASE_URL –Ω–∞–π–¥–µ–Ω–∞.")
    # --- –ö–û–ù–ï–¶ –û–¢–õ–ê–î–û–ß–ù–û–ì–û –ö–û–î–ê ---

    # –ê–¥–∞–ø—Ç–∞—Ü–∏—è —Å—Ç—Ä–æ–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –¥–ª—è Vercel Postgres –∏ asyncpg
    if "postgres://" in db_url_from_env:
        db_url_adapted = db_url_from_env.replace("postgres://", "postgresql+asyncpg://", 1)
        engine = create_engine(db_url_adapted)
        print(f"DEBUG: Engine —Å–æ–∑–¥–∞–Ω —Å –¥—Ä–∞–π–≤–µ—Ä–æ–º asyncpg.")
    else:
        # –≠—Ç–æ—Ç –±–ª–æ–∫ –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π, –µ—Å–ª–∏ —Ñ–æ—Ä–º–∞—Ç URL –¥—Ä—É–≥–æ–π
        engine = create_engine(db_url_from_env)
        print(f"DEBUG: Engine —Å–æ–∑–¥–∞–Ω —Å–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º –¥—Ä–∞–π–≤–µ—Ä–æ–º.")

    Base.metadata.create_all(bind=engine)
    SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)
    print("INFO: –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –∏ —Ç–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–Ω—ã/–ø—Ä–æ–≤–µ—Ä–µ–Ω—ã.")
except Exception as e:
    # –≠—Ç–∞ –æ—à–∏–±–∫–∞ —Ç–µ–ø–µ—Ä—å –±—É–¥–µ—Ç –±–æ–ª–µ–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ–π
    print(f"FATAL ERROR: –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}. SessionLocal –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.")
    SessionLocal = None


# --- 4. BOT & APP INITIALIZATION ---
application: Optional[Application] = None
bot: Optional[Bot] = None
try:
    application = ApplicationBuilder().token(TELEGRAM_TOKEN).build()
    bot = application.bot
    print("INFO: Application (v20+) –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.")
except Exception as e:
    print(f"ERROR: –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å Application: {e}")
    application = None
    bot = None

app = FastAPI()


# --- 5. –§–£–ù–ö–¶–ò–ò-–ü–û–ú–û–©–ù–ò–ö–ò ---

def get_db_setting(db_session, key: str, default: str) -> str:
    setting = db_session.query(Settings).filter_by(setting_key=key).first()
    return setting.setting_value if setting else default

def set_db_setting(db_session, key: str, value: str):
    setting = db_session.query(Settings).filter_by(setting_key=key).first()
    if setting:
        setting.setting_value = value
    else:
        db_session.add(Settings(setting_key=key, setting_value=value))
    db_session.commit()

async def analyze_for_scam(text_to_analyze: str) -> bool:
    if not GEMINI_API_KEY: return False
    try:
        from google import genai
        # --- –ò–ó–ú–ï–ù–ï–ù–ò–ï: –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ---
        genai.configure(api_key=GEMINI_API_KEY)
        model = genai.GenerativeModel('gemini-pro')
        prompt = (
            "–¢—ã ‚Äî —Å—Ç—Ä–æ–≥–∏–π –º–æ–¥–µ—Ä–∞—Ç–æ—Ä. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–æ–æ–±—â–µ–Ω–∏–µ. "
            "–ï—Å–ª–∏ –æ–Ω–æ —è–≤–ª—è–µ—Ç—Å—è —è–≤–Ω—ã–º —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–º —Å–ø–∞–º–æ–º, –º–æ—à–µ–Ω–Ω–∏—á–µ—Å–∫–∏–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º –æ —Ä–∞–±–æ—Ç–µ, "
            "–∏–ª–∏ —Ñ–∏—à–∏–Ω–≥–æ–º, –æ—Ç–≤–µ—Ç—å –¢–û–õ–¨–ö–û –æ–¥–Ω–∏–º —Å–ª–æ–≤–æ–º: –î–ê. –í –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ –æ—Ç–≤–µ—Ç—å –¢–û–õ–¨–ö–û –æ–¥–Ω–∏–º —Å–ª–æ–≤–æ–º: –ù–ï–¢.\n\n"
            f"–°–æ–æ–±—â–µ–Ω–∏–µ: \"{text_to_analyze}\""
        )
        response = await model.generate_content_async(prompt)
        return response.text.strip().upper() == '–î–ê'
    except Exception as e:
        print(f"ERROR: –û—à–∏–±–∫–∞ –≤—ã–∑–æ–≤–∞ Gemini API: {e}")
        return False

async def generate_response(user_prompt: str) -> str:
    if not GEMINI_API_KEY: return "–ò–∑–≤–∏–Ω–∏—Ç–µ, Gemini API-–∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω."
    try:
        from google import genai
        genai.configure(api_key=GEMINI_API_KEY)
        model = genai.GenerativeModel('gemini-pro')
        response = await model.generate_content_async(user_prompt)
        return response.text
    except Exception as e:
        print(f"ERROR: –û—à–∏–±–∫–∞ –≤—ã–∑–æ–≤–∞ Gemini API: {e}")
        return "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ —Å–≤—è–∑–∞—Ç—å—Å—è —Å AI."

async def find_faq_response(message_text: str) -> str | None:
    if SessionLocal is None: return None
    db = SessionLocal()
    try:
        message_words = set(message_text.lower().split())
        active_faqs = db.query(FAQ).filter(FAQ.enabled == True).all()
        for faq in active_faqs:
            faq_keywords = set(faq.keywords.lower().split(','))
            if any(word in message_words for word in faq_keywords):
                return faq.response_text
    except OperationalError:
        print("ERROR: –û—à–∏–±–∫–∞ –ë–î –ø—Ä–∏ –ø–æ–∏—Å–∫–µ FAQ.")
    finally:
        db.close()
    return None


# --- 6. HANDLERS (–õ–û–ì–ò–ö–ê) ---

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if SessionLocal is None:
        await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞: –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ —Å–µ—Ä–≤–µ—Ä–∞.")
        return
    db = SessionLocal()
    try:
        welcome_text = get_db_setting(db, 'welcome_text',
            "üéâ –ü—Ä–∏–≤–µ—Ç! –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω, –ë–î –ø–æ–¥–∫–ª—é—á–µ–Ω–∞. –Ø –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /admin –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫.")
    finally:
        db.close()
    await update.message.reply_text(welcome_text)
    try:
        await context.bot.send_message(
            chat_id=ADMIN_CHAT_ID,
            text=f"–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.effective_user.name} –≤–≤–µ–ª –∫–æ–º–∞–Ω–¥—É /start."
        )
    except Exception as e:
        print(f"–û–®–ò–ë–ö–ê –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø –ê–î–ú–ò–ù–ê: {e}")

async def add_faq(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if str(update.effective_user.id) != ADMIN_CHAT_ID:
        await update.message.reply_text("‚õîÔ∏è –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return
    if SessionLocal is None:
        await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞: –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞.")
        return
    if len(context.args) < 1 or ';' not in " ".join(context.args):
        await update.message.reply_text("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /addfaq <–∫–ª—é—á–∏ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é>; <—Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞>")
        return
    db = SessionLocal()
    try:
        full_text = " ".join(context.args)
        keywords_part, response_part = full_text.split(';', 1)
        keywords = keywords_part.strip().lower()
        response_text = response_part.strip()
        new_faq = FAQ(keywords=keywords, response_text=response_text, enabled=True)
        db.add(new_faq)
        db.commit()
        await update.message.reply_text(f"‚úÖ –ù–æ–≤—ã–π FAQ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!\n–ö–ª—é—á–∏: {keywords}")
    except Exception as e:
        db.rollback()
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è FAQ: {e}")
    finally:
        db.close()

async def handle_mention(update: Update, context: ContextTypes.DEFAULT_TYPE):
    message_text = update.message.text
    mention_username = f"@{context.bot.username}"
    clean_text = message_text.replace(mention_username, "", 1).strip()
    if not clean_text:
        await update.message.reply_text("–Ø –∑–¥–µ—Å—å. –°–ø—Ä–∞—à–∏–≤–∞–π—Ç–µ, —è —Å–ª—É—à–∞—é! ü§ñ")
        return
    if await analyze_for_scam(clean_text):
        await update.message.delete()
        await context.bot.send_message(chat_id=update.effective_chat.id, text="‚ùå –í–æ–ø—Ä–æ—Å —É–¥–∞–ª–µ–Ω AI. –ü—Ä–∏—á–∏–Ω–∞: –ú–æ—à–µ–Ω–Ω–∏—á–µ—Å—Ç–≤–æ/—Å–ø–∞–º.")
        return
    await update.message.reply_text("–î—É–º–∞—é... (–∏—Å–ø–æ–ª—å–∑—É—é Gemini)")
    response = await generate_response(clean_text)
    await update.message.reply_text(response)


async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    message_text = update.message.text

    # 1. –ú–û–î–£–õ–¨ GEMINI (–ì–ª—É–±–æ–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞)
    if await analyze_for_scam(message_text):
        await update.message.delete()
        warning = "‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ AI (Gemini). –ü—Ä–∏—á–∏–Ω–∞: –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –º–æ—à–µ–Ω–Ω–∏—á–µ—Å—Ç–≤–æ/—Å–ø–∞–º."
        await context.bot.send_message(chat_id=update.effective_chat.id, text=warning)
        return

    # 2. --- –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ú–û–î–£–õ–¨ ZERO-SHOT —á–µ—Ä–µ–∑ API ---
    mod_threshold = MOD_THRESHOLD_DEFAULT
    if SessionLocal:
        db = SessionLocal()
        try:
            mod_threshold = float(get_db_setting(db, 'mod_threshold', str(MOD_THRESHOLD_DEFAULT)))
        finally:
            db.close()

    candidate_labels = ["—Ç–æ–∫—Å–∏—á–Ω–æ—Å—Ç—å", "–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã", "—Ä–µ–∫–ª–∞–º–∞", "—Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π —Å–ø–∞–º"]
    results = await classify_text_huggingface(message_text, candidate_labels)

    if results and results.get('labels') and results.get('scores'):
        best_label = results['labels'][0]
        best_score = results['scores'][0]

        if (best_label in ["—Ç–æ–∫—Å–∏—á–Ω–æ—Å—Ç—å", "—Ä–µ–∫–ª–∞–º–∞"]) and best_score > mod_threshold:
            await update.message.delete()
            warning = f"‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ AI. –ü—Ä–∏—á–∏–Ω–∞: {best_label} (–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {best_score:.2%})."
            await context.bot.send_message(chat_id=update.effective_chat.id, text=warning)
            return

    # 3. –¢–†–ò–ì–ì–ï–†–ù–´–ô –ü–û–ò–°–ö (FAQ)
    faq_answer = await find_faq_response(message_text)
    if faq_answer:
        await update.message.reply_text(faq_answer)
        return

    # 4. –ë–∞–∑–æ–≤—ã–π –æ—Ç–≤–µ—Ç (–µ—Å–ª–∏ –≤—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã)
    # await update.message.reply_text(f"–Ø –ø–æ–ª—É—á–∏–ª —Ç–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: '{message_text}'") # –ú–æ–∂–Ω–æ –æ—Ç–∫–ª—é—á–∏—Ç—å –¥–ª—è —Ç–∏—à–∏–Ω—ã


# --- –ê–î–ú–ò–ù-–ú–ï–ù–Æ –•–ï–ù–î–õ–ï–†–´ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---

async def admin_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if str(update.effective_user.id) != ADMIN_CHAT_ID:
        await update.message.reply_text("‚õîÔ∏è –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.")
        return
    context.user_data['state'] = None
    keyboard = [
        [InlineKeyboardButton("üìö –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ FAQ (–ß–µ—Ä–µ–∑ /addfaq)", callback_data='admin_info')],
        [InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ—Ä–æ–≥–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏", callback_data='admin_moderation')],
        [InlineKeyboardButton("üìù –°–±—Ä–æ—Å–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ", callback_data='admin_reset_state')],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text('–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≥–∏–±—Ä–∏–¥–Ω–æ—Å—Ç–∏:', reply_markup=reply_markup)

async def admin_callback_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data
    if data == 'admin_moderation':
        await manage_moderation_menu(query.message, context)
    elif data == 'admin_reset_state':
        context.user_data['state'] = None
        await query.message.edit_text("‚úÖ –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–±—Ä–æ—à–µ–Ω–æ. –í–≤–µ–¥–∏—Ç–µ /admin —Å–Ω–æ–≤–∞ –¥–ª—è –º–µ–Ω—é.")
    elif data == 'admin_info':
        await query.message.edit_text("–î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è FAQ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É `/addfaq –∫–ª—é—á–∏; –æ—Ç–≤–µ—Ç`", parse_mode='Markdown')

async def manage_moderation_menu(message, context: ContextTypes.DEFAULT_TYPE):
    if SessionLocal is None:
        await message.edit_text("‚ö†Ô∏è –û—à–∏–±–∫–∞: –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞.")
        return
    db = SessionLocal()
    try:
        current_threshold = get_db_setting(db, 'mod_threshold', str(MOD_THRESHOLD_DEFAULT))
    finally:
        db.close()
    text = f"–¢–µ–∫—É—â–∏–π –ø–æ—Ä–æ–≥ Zero-Shot (–æ—Ç—Å–µ—á–µ–Ω–∏–µ): **{current_threshold}**\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ (0.00 –¥–æ 1.00):"
    context.user_data['state'] = STATE_AWAITING_NEW_THRESHOLD
    await message.edit_text(text, parse_mode='Markdown')

async def handle_admin_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    state = context.user_data.get('state')
    if state == STATE_AWAITING_NEW_THRESHOLD:
        new_value = update.message.text
        try:
            float_value = float(new_value)
            if not (0.0 <= float_value <= 1.0): raise ValueError
        except ValueError:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 0.00 –¥–æ 1.00.")
            return
        db = SessionLocal()
        try:
            set_db_setting(db, 'mod_threshold', str(float_value))
            context.user_data['state'] = None
            await update.message.reply_text(f"‚úÖ –ü–æ—Ä–æ–≥ –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω –¥–æ: **{float_value}**.")
        except Exception as e:
            db.rollback()
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ë–î –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏: {e}")
        finally:
            db.close()
    else:
        await update.message.reply_text("–Ø –Ω–µ –∑–Ω–∞—é, —á—Ç–æ –¥–µ–ª–∞—Ç—å —Å —ç—Ç–∏–º —Ç–µ–∫—Å—Ç–æ–º. –í–≤–µ–¥–∏—Ç–µ /admin –¥–ª—è –º–µ–Ω—é.")


# --- 7. REGISTER HANDLERS ---
if application:
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("addfaq", add_faq))
    application.add_handler(CommandHandler("admin", admin_menu))
    application.add_handler(CallbackQueryHandler(admin_callback_handler, pattern='^admin_'))
    application.add_handler(MessageHandler(
        filters.TEXT & filters.User(user_id=int(ADMIN_CHAT_ID)) & ~filters.COMMAND, handle_admin_input
    ))
    application.add_handler(MessageHandler(filters.TEXT & filters.Entity("mention"), handle_mention))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
else:
    print("ERROR: Application –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω, —Ö—ç–Ω–¥–ª–µ—Ä—ã –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã.")


# --- 8. WEB SERVER ENDPOINTS ---
@app.post("/api/webhook")
async def webhook(request: Request):
    if not application or not bot:
        return {"status": "error", "message": "Bot not initialized"}
    try:
        data = await request.json()
        update = Update.de_json(data, bot)
        await application.initialize()
        await application.process_update(update)
        await application.shutdown()
        return {"status": "ok"}
    except Exception as e:
        print(f"ERROR: –û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –≤–µ–±—Ö—É–∫–∞: {e}")
        return {"status": "error", "message": str(e)}

@app.get("/")
def health_check():
    return {"status": "Bot is alive and ready for Vercel!"}
