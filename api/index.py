# –§–∞–π–ª: api/index.py (–§–ò–ù–ê–õ–¨–ù–ê–Ø –†–ê–ë–û–ß–ê–Ø –í–ï–†–°–ò–Ø v15.2 - —Å —Å–∞–º–æ–¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–æ–π AI)

import os
import asyncio
import httpx
from fastapi import FastAPI, Request
from telegram import Update, Bot, InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery
from telegram.ext import Application, ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes, CallbackQueryHandler
from typing import Optional
from sqlalchemy import create_engine, Column, Integer, String, Boolean, Text
from sqlalchemy.orm import sessionmaker, declarative_base

# --- 1. CONFIGURATION ---
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
ADMIN_CHAT_ID = os.getenv("ADMIN_CHAT_ID")
DATABASE_URL = os.getenv("POSTGRES_PRISMA_URL")
GEMINI_API_KEY = os.getenv("GEMINI_API_KEY")
HUGGING_FACE_TOKEN = os.getenv("HUGGING_FACE_TOKEN")
HUGGING_FACE_MODEL_URL = "https://api-inference.huggingface.co/models/MoritzLaurer/mDeBERTa-v3-base-xnli-multilingual-fein-tuned"

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
MOD_THRESHOLD_DEFAULT = 0.85
STATE_AWAITING_NEW_THRESHOLD = 'AWAITING_NEW_THRESHOLD'

# --- 2. DATABASE SETUP (–°–ò–ù–•–†–û–ù–ù–û–ï) ---
Base = declarative_base()
engine = None
SessionLocal = None

try:
    if not DATABASE_URL:
        raise ValueError("–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è POSTGRES_PRISMA_URL –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
    main_db_url = DATABASE_URL.split('?')[0]
    db_url_adapted = main_db_url.replace("postgres://", "postgresql+pg8000://", 1)
    engine = create_engine(db_url_adapted)
    SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)
    Base.metadata.create_all(bind=engine, checkfirst=True)
    print("INFO: –°–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π Engine –∏ SessionLocal —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã.")
except Exception as e:
    print(f"FATAL ERROR during engine setup: {e}")

# --- –ú–û–î–ï–õ–ò –î–ê–ù–ù–´–• ---
class Settings(Base):
    __tablename__ = 'settings'
    id = Column(Integer, primary_key=True)
    setting_key = Column(String, unique=True)
    setting_value = Column(Text)
class FAQ(Base):
    __tablename__ = 'faq'
    id = Column(Integer, primary_key=True)
    keywords = Column(Text, nullable=False)
    response_text = Column(Text, nullable=False)
    enabled = Column(Boolean, default=True)

# --- –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø FastAPI ---
app = FastAPI()

# --- –°–ò–ù–•–†–û–ù–ù–´–ï –§–£–ù–ö–¶–ò–ò-–ü–û–ú–û–©–ù–ò–ö–ò –î–õ–Ø –ë–î ---
def get_db_setting(session, key: str, default: str) -> str:
    setting = session.query(Settings).filter_by(setting_key=key).first()
    return setting.setting_value if setting else default

def set_db_setting(session, key: str, value: str):
    setting = session.query(Settings).filter_by(setting_key=key).first()
    if setting:
        setting.setting_value = value
    else:
        session.add(Settings(setting_key=key, setting_value=value))
    session.commit()

def find_faq_response(session, message_text: str) -> str | None:
    message_words = set(message_text.lower().split())
    active_faqs = session.query(FAQ).filter(FAQ.enabled == True).all()
    for faq in active_faqs:
        faq_keywords = set(faq.keywords.lower().split(','))
        if any(word in message_words for word in faq_keywords):
            return faq.response_text
    return None

def add_faq_db(session, keywords: str, response_text: str):
    new_faq = FAQ(keywords=keywords, response_text=response_text, enabled=True)
    session.add(new_faq)
    session.commit()

# --- –ê–°–ò–ù–•–†–û–ù–ù–´–ï –§–£–ù–ö–¶–ò–ò-–ü–û–ú–û–©–ù–ò–ö–ò –î–õ–Ø AI ---
async def classify_text_huggingface(text: str, labels: list) -> Optional[dict]:
    if not HUGGING_FACE_TOKEN:
        print("LOG_AI: HUGGING_FACE_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return None
    headers = {"Authorization": f"Bearer {HUGGING_FACE_TOKEN}"}
    payload = {"inputs": text, "parameters": {"candidate_labels": labels, "multi_label": True}}
    async with httpx.AsyncClient() as client:
        try:
            response = await client.post(HUGGING_FACE_MODEL_URL, headers=headers, json=payload, timeout=10.0)
            return response.json() if response.status_code == 200 else {"error": response.text}
        except httpx.RequestError as e:
            print(f"LOG_AI_ERROR: –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ Hugging Face: {e}")
            return None

async def analyze_for_scam(text_to_analyze: str) -> bool:
    if not GEMINI_API_KEY:
        print("LOG_AI: GEMINI_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return False
    try:
        from google import genai
        genai.configure(api_key=GEMINI_API_KEY)
        model = genai.GenerativeModel('gemini-pro')
        prompt = (f"–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –Ω–∞ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π —Å–ø–∞–º, –º–æ—à–µ–Ω–Ω–∏—á–µ—Å—Ç–≤–æ –∏–ª–∏ —Ñ–∏—à–∏–Ω–≥. –û—Ç–≤–µ—Ç—å —Ç–æ–ª—å–∫–æ –î–ê –∏–ª–∏ –ù–ï–¢.\n\n–°–æ–æ–±—â–µ–Ω–∏–µ: \"{text_to_analyze}\"")
        response = await model.generate_content_async(prompt)
        return response.text.strip().upper() == '–î–ê'
    except Exception as e:
        print(f"LOG_AI_ERROR: –û—à–∏–±–∫–∞ –≤—ã–∑–æ–≤–∞ Gemini API (—Å–∫–∞–º): {e}")
        return False

async def generate_response(user_prompt: str) -> str:
    if not GEMINI_API_KEY:
        print("LOG_AI: GEMINI_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return "–ö–ª—é—á Gemini API –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω."
    try:
        from google import genai
        genai.configure(api_key=GEMINI_API_KEY)
        model = genai.GenerativeModel('gemini-pro')
        response = await model.generate_content_async(user_prompt)
        return response.text
    except Exception as e:
        print(f"LOG_AI_ERROR: –û—à–∏–±–∫–∞ –≤—ã–∑–æ–≤–∞ Gemini API (–≥–µ–Ω–µ—Ä–∞—Ü–∏—è): {e}")
        return f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ –ò–ò: {e}"

# --- HANDLERS (–ì–ò–ë–†–ò–î–ù–´–ï) ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if SessionLocal is None:
        await update.message.reply_text("‚ö†Ô∏è –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏. SessionLocal –Ω–µ —Å–æ–∑–¥–∞–Ω.")
        return
    session = SessionLocal()
    try:
        welcome_text = await asyncio.to_thread(get_db_setting, session, 'welcome_text', "üéâ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
        await update.message.reply_text(welcome_text)
    except Exception as e:
        await update.message.reply_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –ë–î: {e}")
    finally:
        await asyncio.to_thread(session.close)

async def add_faq(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if str(update.effective_user.id) != ADMIN_CHAT_ID:
        await update.message.reply_text("‚õîÔ∏è –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return
    if SessionLocal is None:
        await update.message.reply_text("‚ö†Ô∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞.")
        return
    if len(context.args) < 1 or ';' not in " ".join(context.args):
        await update.message.reply_text("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /addfaq <–∫–ª—é—á–∏,—á–µ—Ä–µ–∑,–∑–∞–ø—è—Ç—É—é>; <—Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞>")
        return
    
    session = SessionLocal()
    try:
        full_text = " ".join(context.args)
        keywords_part, response_part = full_text.split(';', 1)
        await asyncio.to_thread(add_faq_db, session, keywords_part.strip().lower(), response_part.strip())
        await update.message.reply_text(f"‚úÖ –ù–æ–≤—ã–π FAQ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!\n–ö–ª—é—á–∏: {keywords_part.strip().lower()}")
    except Exception as e:
        await asyncio.to_thread(session.rollback)
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è FAQ: {e}")
    finally:
        await asyncio.to_thread(session.close)

async def handle_mention(update: Update, context: ContextTypes.DEFAULT_TYPE):
    message_text = update.message.text
    mention_username = f"@{context.bot.username}"
    clean_text = message_text.replace(mention_username, "", 1).strip()
    if not clean_text:
        await update.message.reply_text("–Ø –∑–¥–µ—Å—å. –°–ø—Ä–∞—à–∏–≤–∞–π—Ç–µ! ü§ñ")
        return
    if await analyze_for_scam(clean_text):
        await update.message.delete()
        await context.bot.send_message(chat_id=update.effective_chat.id, text="‚ùå –í–æ–ø—Ä–æ—Å —É–¥–∞–ª–µ–Ω –ò–ò. –ü—Ä–∏—á–∏–Ω–∞: –ú–æ—à–µ–Ω–Ω–∏—á–µ—Å—Ç–≤–æ/—Å–ø–∞–º.")
        return
    await update.message.reply_text("–î—É–º–∞—é... (–∏—Å–ø–æ–ª—å–∑—É—é Gemini)")
    response = await generate_response(clean_text)
    await update.message.reply_text(response)

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    message_text = update.message.text
    if await analyze_for_scam(message_text):
        await update.message.delete()
        await context.bot.send_message(chat_id=update.effective_chat.id, text="‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ –ò–ò (Gemini). –ü—Ä–∏—á–∏–Ω–∞: –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –º–æ—à–µ–Ω–Ω–∏—á–µ—Å—Ç–≤–æ/—Å–ø–∞–º.")
        return

    mod_threshold = MOD_THRESHOLD_DEFAULT
    session = SessionLocal()
    try:
        threshold_str = await asyncio.to_thread(get_db_setting, session, 'mod_threshold', str(MOD_THRESHOLD_DEFAULT))
        mod_threshold = float(threshold_str)
    except (ValueError, TypeError):
        pass
    finally:
        await asyncio.to_thread(session.close)

    candidate_labels = ["—Ç–æ–∫—Å–∏—á–Ω–æ—Å—Ç—å", "–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã", "—Ä–µ–∫–ª–∞–º–∞", "—Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π —Å–ø–∞–º"]
    results = await classify_text_huggingface(message_text, candidate_labels)
    if results and results.get('labels') and results.get('scores'):
        best_label, best_score = results['labels'][0], results['scores'][0]
        if (best_label in ["—Ç–æ–∫—Å–∏—á–Ω–æ—Å—Ç—å", "—Ä–µ–∫–ª–∞–º–∞"]) and best_score > mod_threshold:
            await update.message.delete()
            await context.bot.send_message(chat_id=update.effective_chat.id, text=f"‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ –ò–ò. –ü—Ä–∏—á–∏–Ω–∞: {best_label} (–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {best_score:.2%}).")
            return

    session = SessionLocal()
    try:
        faq_answer = await asyncio.to_thread(find_faq_response, session, message_text)
        if faq_answer:
            await update.message.reply_text(faq_answer)
            return
    finally:
        await asyncio.to_thread(session.close)

async def run_ai_self_test(query: CallbackQuery):
    await query.edit_message_text("üîç –ü—Ä–æ–≤–æ–∂—É —Å–∞–º–æ–¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É –Ω–µ–π—Ä–æ—Å–µ—Ç–µ–π...")
    report = ["**–û—Ç—á–µ—Ç –ø–æ —Å–∞–º–æ–¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–µ:**\n"]
    
    report.append("--- **Google Gemini** ---")
    if os.getenv("GEMINI_API_KEY"):
        report.append("‚úÖ –ö–ª—é—á `GEMINI_API_KEY`: **–ù–∞–π–¥–µ–Ω**")
        try:
            test_response = await generate_response("–¢—ã —Ä–∞–±–æ—Ç–∞–µ—à—å? –û—Ç–≤–µ—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–Ω–∏–º —Å–ª–æ–≤–æ–º: –î–∞")
            if "–¥–∞" in test_response.lower():
                report.append("‚úÖ –¢–µ—Å—Ç API: **–£—Å–ø–µ—à–Ω–æ**")
            else:
                report.append(f"‚ùå –¢–µ—Å—Ç API: **–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç** (–ø–æ–ª—É—á–µ–Ω–æ: '{test_response[:100]}...')")
        except Exception as e:
            report.append(f"‚ùå –¢–µ—Å—Ç API: **–ü—Ä–æ–≤–∞–ª–µ–Ω —Å –æ—à–∏–±–∫–æ–π** ({e})")
    else:
        report.append("‚ùå –ö–ª—é—á `GEMINI_API_KEY`: **–ù–ï –ù–ê–ô–î–ï–ù** –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö Vercel.")

    report.append("\n--- **Hugging Face** ---")
    if os.getenv("HUGGING_FACE_TOKEN"):
        report.append("‚úÖ –ö–ª—é—á `HUGGING_FACE_TOKEN`: **–ù–∞–π–¥–µ–Ω**")
        try:
            hf_response = await classify_text_huggingface("—ç—Ç–æ –ø—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç –¥–ª—è —Ç–µ—Å—Ç–∞", ["—Ç–µ—Å—Ç"])
            if isinstance(hf_response, dict) and 'labels' in hf_response:
                report.append("‚úÖ –¢–µ—Å—Ç API: **–£—Å–ø–µ—à–Ω–æ**")
            else:
                report.append(f"‚ùå –¢–µ—Å—Ç API: **–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç** (`{hf_response}`)")
        except Exception as e:
             report.append(f"‚ùå –¢–µ—Å—Ç API: **–ü—Ä–æ–≤–∞–ª–µ–Ω —Å –æ—à–∏–±–∫–æ–π** ({e})")
    else:
        report.append("‚ùå –ö–ª—é—á `HUGGING_FACE_TOKEN`: **–ù–ï –ù–ê–ô–î–ï–ù** –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö Vercel.")
        
    await query.edit_message_text("\n".join(report), parse_mode='Markdown')

async def admin_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if str(update.effective_user.id) != ADMIN_CHAT_ID:
        await update.message.reply_text("‚õîÔ∏è –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.")
        return
    context.user_data['state'] = None
    keyboard = [
        [InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–æ—Ä–æ–≥ –º–æ–¥–µ—Ä–∞—Ü–∏–∏", callback_data='admin_moderation')],
        [InlineKeyboardButton("üß† –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–µ–π—Ä–æ—Å–µ—Ç–∏", callback_data='admin_test_ai')]
    ]
    await update.message.reply_text('–ú–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:', reply_markup=InlineKeyboardMarkup(keyboard))

async def admin_callback_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    if query.data == 'admin_moderation':
        if SessionLocal is None:
            await query.message.edit_text("‚ö†Ô∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞.")
            return
        session = SessionLocal()
        try:
            current_threshold = await asyncio.to_thread(get_db_setting, session, 'mod_threshold', str(MOD_THRESHOLD_DEFAULT))
            text = f"–¢–µ–∫—É—â–∏–π –ø–æ—Ä–æ–≥ –º–æ–¥–µ—Ä–∞—Ü–∏–∏: **{current_threshold}**\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ (–æ—Ç 0.00 –¥–æ 1.00):"
            context.user_data['state'] = STATE_AWAITING_NEW_THRESHOLD
            await query.message.edit_text(text, parse_mode='Markdown')
        except Exception as e:
            await query.message.edit_text(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")
        finally:
            await asyncio.to_thread(session.close)

    elif query.data == 'admin_test_ai':
        await run_ai_self_test(query)

async def handle_admin_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    state = context.user_data.get('state')
    if state == STATE_AWAITING_NEW_THRESHOLD:
        try:
            float_value = float(update.message.text)
            if not (0.0 <= float_value <= 1.0): raise ValueError
        except ValueError:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 0.00 –¥–æ 1.00.")
            return
        
        session = SessionLocal()
        try:
            await asyncio.to_thread(set_db_setting, session, 'mod_threshold', str(float_value))
            context.user_data['state'] = None
            await update.message.reply_text(f"‚úÖ –ü–æ—Ä–æ–≥ –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω –¥–æ: **{float_value}**.", parse_mode='Markdown')
        except Exception as e:
            await asyncio.to_thread(session.rollback)
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ë–î –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏: {e}")
        finally:
            await asyncio.to_thread(session.close)

# --- WEB SERVER ENDPOINTS ---
@app.post("/api/webhook")
async def webhook(request: Request):
    application = ApplicationBuilder().token(TELEGRAM_TOKEN).build()
    
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("addfaq", add_faq))
    application.add_handler(CommandHandler("admin", admin_menu))
    application.add_handler(CallbackQueryHandler(admin_callback_handler, pattern='^admin_'))
    application.add_handler(MessageHandler(filters.TEXT & filters.User(user_id=int(ADMIN_CHAT_ID)) & ~filters.COMMAND, handle_admin_input))
    application.add_handler(MessageHandler(filters.TEXT & filters.Entity("mention"), handle_mention))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    
    try:
        data = await request.json()
        update = Update.de_json(data, application.bot)
        await application.initialize()
        await application.process_update(update)
        await application.shutdown()
        return {"status": "ok"}
    except Exception as e:
        print(f"ERROR: –û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –≤–µ–±—Ö—É–∫–∞: {e}")
        return {"status": "error", "message": str(e)}

@app.get("/")
def health_check():
    return {"status": "–ë–æ—Ç –∂–∏–≤. –í–µ—Ä—Å–∏—è v15.2 (—Å —Å–∞–º–æ–¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–æ–π AI)."}
