# –§–∞–π–ª: api/index.py (–§–ò–ù–ê–õ–¨–ù–ê–Ø –†–ê–ë–û–ß–ê–Ø –í–ï–†–°–ò–Ø v20+)

import os
from fastapi import FastAPI, Request
from telegram import Update, Bot
# !!! –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º Application –∏ ApplicationBuilder –¥–ª—è v20+ !!!
from telegram.ext import Application, ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes
from sqlalchemy import create_engine, Column, Integer, String, Boolean, Text
from sqlalchemy.orm import sessionmaker, declarative_base
from sqlalchemy.exc import OperationalError

# --- 1. CONFIGURATION (READ FROM RENDER ENVIRONMENT) ---
# –≠—Ç–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –≤ –≤–∞—à–µ–π —Å—Ä–µ–¥–µ Render
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
ADMIN_CHAT_ID = os.getenv("ADMIN_CHAT_ID")
DATABASE_URL = os.getenv("DATABASE_URL")
GEMINI_API_KEY = os.getenv("GEMINI_API_KEY")


# --- 2. –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ù–ï–ô–†–û–°–ï–¢–ò (–ì–ò–ë–†–ò–î–ù–ê–Ø –°–ò–°–¢–ï–ú–ê) ---
try:
    from transformers import pipeline
    # Zero-Shot –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Å–ø–∞–º–∞, —Ç–æ–∫—Å–∏—á–Ω–æ—Å—Ç–∏ –∏ —Ä–µ–∫–ª–∞–º—ã
    text_classifier = pipeline(
        "zero-shot-classification",
        model="s-nlp/ru-mtl-zero-shot-public"
    )
    print("INFO: Zero-Shot –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∂–µ–Ω.")
except Exception as e:
    print(f"ERROR: –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ Zero-Shot: {e}")
    text_classifier = None


# --- 3. DATABASE SETUP (SQLAlchemy) ---
Base = declarative_base()
class Settings(Base):
    __tablename__ = 'settings'
    id = Column(Integer, primary_key=True)
    setting_key = Column(String, unique=True)
    setting_value = Column(Text)

class FAQ(Base):
    __tablename__ = 'faq'
    id = Column(Integer, primary_key=True)
    keywords = Column(Text, nullable=False)
    response_text = Column(Text, nullable=False)
    enabled = Column(Boolean, default=True)

try:
    engine = create_engine(DATABASE_URL)
    SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)
    print("INFO: –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞.")
except Exception as e:
    print(f"ERROR: –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
    SessionLocal = None


# --- 4. BOT & APP INITIALIZATION (–§–ò–ö–° v20+) ---
# 'application' —Ç–µ–ø–µ—Ä—å —Å–æ–¥–µ—Ä–∂–∏—Ç –∏ –±–æ—Ç–∞, –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä
try:
    application = ApplicationBuilder().token(TELEGRAM_TOKEN).build()
    bot = application.bot  # –ú–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –±–æ—Ç–∞ –∏–∑ 'application', –µ—Å–ª–∏ –æ–Ω –Ω—É–∂–µ–Ω –æ—Ç–¥–µ–ª—å–Ω–æ
    print("INFO: Application (v20+) –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.")
except Exception as e:
    print(f"ERROR: –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å Application: {e}")
    # –ï—Å–ª–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ —Å–æ–∑–¥–∞–ª–æ—Å—å, FastAPI –≤—Å–µ —Ä–∞–≤–Ω–æ –¥–æ–ª–∂–µ–Ω –∑–∞–ø—É—Å—Ç–∏—Ç—å—Å—è, 
    # –Ω–æ –≤–µ–±—Ö—É–∫ –±—É–¥–µ—Ç –ø–∞–¥–∞—Ç—å —Å –æ—à–∏–±–∫–æ–π (—á—Ç–æ –æ–∂–∏–¥–∞–µ–º–æ)
    application = None
    bot = None # –î–æ–±–∞–≤–ª—è–µ–º bot = None –¥–ª—è —è—Å–Ω–æ—Å—Ç–∏

app = FastAPI()


# --- 5. –§–£–ù–ö–¶–ò–Ø: –ê–ù–ê–õ–ò–ó –°–ü–ê–ú–ê –ß–ï–†–ï–ó GEMINI (LLM) ---
async def analyze_for_scam(text_to_analyze: str) -> bool:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç –≤ Gemini API –¥–ª—è –≥–ª—É–±–æ–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –º–æ—à–µ–Ω–Ω–∏—á–µ—Å—Ç–≤–∞."""
    if not GEMINI_API_KEY:
        return False
        
    try:
        # –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –î–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è 'google-genai' –º–æ–∂–µ—Ç –ø–æ—Ç—Ä–µ–±–æ–≤–∞—Ç—å—Å—è 
        # –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö –æ–±–µ—Ä—Ç–æ–∫, –Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        from google import genai
        client = genai.Client(api_key=GEMINI_API_KEY)
        
        prompt = (
            "–¢—ã ‚Äî —Å—Ç—Ä–æ–≥–∏–π –º–æ–¥–µ—Ä–∞—Ç–æ—Ä. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–æ–æ–±—â–µ–Ω–∏–µ. "
            "–ï—Å–ª–∏ –æ–Ω–æ —è–≤–ª—è–µ—Ç—Å—è —è–≤–Ω—ã–º —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–º —Å–ø–∞–º–æ–º, –º–æ—à–µ–Ω–Ω–∏—á–µ—Å–∫–∏–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º –æ —Ä–∞–±–æ—Ç–µ, "
            "–∏–ª–∏ —Ñ–∏—à–∏–Ω–≥–æ–º, –æ—Ç–≤–µ—Ç—å –¢–û–õ–¨–ö–û –æ–¥–Ω–∏–º —Å–ª–æ–≤–æ–º: –î–ê. –í –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ –æ—Ç–≤–µ—Ç—å –¢–û–õ–¨–ö–û –æ–¥–Ω–∏–º —Å–ª–æ–≤–æ–º: –ù–ï–¢.\n\n"
            f"–°–æ–æ–±—â–µ–Ω–∏–µ: \"{text_to_analyze}\""
        )
        
        # –í —Ä–∞–±–æ—á–µ–º –∫–æ–¥–µ –º–æ–∂–µ—Ç –ø–æ—Ç—Ä–µ–±–æ–≤–∞—Ç—å—Å—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –≤—ã–∑–æ–≤, 
        # –Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é, –∫–∞–∫ –æ–Ω–∞ –±—ã–ª–∞ –≤ –≤–∞—à–µ–º —Ñ–∞–π–ª–µ:
        response = client.models.generate_content(
            model='gemini-2.5-flash',
            contents=prompt
        )
        return response.text.strip().upper() == '–î–ê'
        
    except Exception as e:
        print(f"ERROR: –û—à–∏–±–∫–∞ –≤—ã–∑–æ–≤–∞ Gemini API: {e}")
        return False


# --- 6. HANDLERS (–õ–û–ì–ò–ö–ê) ---

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ /start."""
    db = SessionLocal()
    try:
        welcome_setting = db.query(Settings).filter_by(setting_key='welcome_text').first()
        welcome_text = welcome_setting.setting_value if welcome_setting else "üéâ –ü—Ä–∏–≤–µ—Ç! –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω, –ë–î –ø–æ–¥–∫–ª—é—á–µ–Ω–∞. –ù–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–∫–∞ –Ω–µ—Ç, –Ω–æ –º—ã –≥–æ—Ç–æ–≤—ã!"
    except OperationalError:
        welcome_text = "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ DATABASE_URL."
    finally:
        db.close()
    
    await update.message.reply_text(welcome_text)
    
    try:
        await context.bot.send_message(
            chat_id=ADMIN_CHAT_ID,
            text=f"–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.effective_user.name} –≤–≤–µ–ª –∫–æ–º–∞–Ω–¥—É /start."
        )
    except Exception as e:
        print(f"–û–®–ò–ë–ö–ê –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø –ê–î–ú–ò–ù–ê: {e}")


async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫: 1. Gemini, 2. Zero-Shot, 3. –û—Ç–≤–µ—Ç."""
    message_text = update.message.text
    
    # 1. –ú–û–î–£–õ–¨ GEMINI (–ì–ª—É–±–æ–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞)
    if await analyze_for_scam(message_text):
        await update.message.delete()
        warning = "‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ AI (Gemini). –ü—Ä–∏—á–∏–Ω–∞: –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –º–æ—à–µ–Ω–Ω–∏—á–µ—Å—Ç–≤–æ/—Å–ø–∞–º."
        await context.bot.send_message(chat_id=update.effective_chat.id, text=warning)
        return
        
    # 2. –ú–û–î–£–õ–¨ ZERO-SHOT (–ë–∞–∑–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ç–æ–∫—Å–∏—á–Ω–æ—Å—Ç—å/—Ä–µ–∫–ª–∞–º—É)
    if text_classifier:
        candidate_labels = ["—Ç–æ–∫—Å–∏—á–Ω–æ—Å—Ç—å", "–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã", "—Ä–µ–∫–ª–∞–º–∞", "—Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π —Å–ø–∞–º"]
        results = text_classifier(message_text, candidate_labels, multi_label=True)
        best_label = results['labels'][0]
        best_score = results['scores'][0]
        
        if (best_label in ["—Ç–æ–∫—Å–∏—á–Ω–æ—Å—Ç—å", "—Ä–µ–∫–ª–∞–º–∞"]) and best_score > 0.85:
            await update.message.delete()
            warning = f"‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ AI. –ü—Ä–∏—á–∏–Ω–∞: {best_label} (–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {best_score:.2%})."
            await context.bot.send_message(chat_id=update.effective_chat.id, text=warning)
            return

    # 3. –ë–∞–∑–æ–≤—ã–π –æ—Ç–≤–µ—Ç
    await update.message.reply_text(f"–Ø –ø–æ–ª—É—á–∏–ª —Ç–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: '{message_text}'")


# --- 7. REGISTER HANDLERS ---
# !!! –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —á–µ—Ä–µ–∑ 'application' !!!
if application:
    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
else:
    print("ERROR: Application –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω, —Ö—ç–Ω–¥–ª–µ—Ä—ã –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã.")


# --- 8. WEB SERVER ENDPOINTS (–°–¢–ê–ë–ò–õ–¨–ù–ê–Ø –í–ï–†–°–ò–Ø v20+) ---

@app.post("/api/webhook")
async def webhook(request: Request):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ Application.
    –≠—Ç–æ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è serverless –æ–∫—Ä—É–∂–µ–Ω–∏—è (v20+).
    """
    if not application:
        print("ERROR: –í–µ–±—Ö—É–∫ –≤—ã–∑–≤–∞–Ω, –Ω–æ Application –Ω–µ —Å–æ–∑–¥–∞–Ω.")
        return {"status": "error", "message": "Bot not initialized"}

    try:
        data = await request.json()
        update = Update.de_json(data, bot)
        
        # !!! –ö–õ–Æ–ß–ï–í–û–ô –§–ò–ö–° –î–õ–Ø RuntimeError: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∫–∞–∂–¥–æ–º –≤—ã–∑–æ–≤–µ !!!
        await application.initialize() 
        await application.process_update(update) 
        await application.shutdown() 
        
        return {"status": "ok"}
        
    except Exception as e:
        print(f"ERROR: –û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –≤–µ–±—Ö—É–∫–∞: {e}")
        return {"status": "error", "message": str(e)}


@app.get("/")
def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è."""
    return {"status": "Bot is alive and ready for action!"}
